{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap b944eeabe996a2caf426","webpack:///./src/index.js","webpack:///./src/core/Console.js","webpack:///./src/core/CPU.js","webpack:///./src/core/CPUMemory.js","webpack:///./src/core/constants.js","webpack:///./src/core/instructions.js","webpack:///./src/core/modes.js","webpack:///./src/core/utils.js","webpack:///./src/core/opcodes.js","webpack:///./src/core/PPU.js","webpack:///./src/core/PPUMemory.js","webpack:///./src/core/ROM.js","webpack:///./src/core/mappers/NROM.js","webpack:///./src/core/mappers/Mapper.js","webpack:///./src/core/mappers/Bank.js","webpack:///./src/core/mappers/MMC1.js","webpack:///./src/core/mappers/constants.js","webpack:///./src/core/mappers/MMC3.js","webpack:///./src/core/mappers/UXROM.js","webpack:///./src/core/APU.js","webpack:///./src/core/Controller.js","webpack:///./src/utils/Merge.js","webpack:///./src/utils/Notifier.js","webpack:///./src/utils/Throttle.js"],"names":["Console","fps","cpu","CPU","ppu","PPU","apu","APU","controller","Controller","rom","cycles","interrupt","quickSaveData","connect","frameReq","frameThrottling","Throttle","nesThrottling","frameNbr","opCodesKeys","Object","keys","OPCODES","modeKeys","MODES","data","ROM","connectROM","reset","toJSON","Error","notifyObservers","frameBuffer","JSON","parse","stringify","frameBackgroundBuffer","frameSpriteBuffer","frameColorBuffer","patternTable1","patternTable2","localStorage","quickSave","resetBuffers","_tick","tick","requestAnimationFrame","frame","bind","tickDebug","cancelAnimationFrame","instrCode","instrOpCode","instrMode","instrSize","instrCycles","addr","INTERRUPTS","NMI","triggerNMI","IRQ","triggerIRQ","frameReady","acknowledgeFrame","c","isThrottled","Notifier","memory","CPUMemory","mapper","b","pc","sp","a","x","y","z","i","d","v","n","_modes","modes","_instructions","instructions","_opcodes","opcodes","stallCounter","tmpCycles","obj","read16","setFlags","stackPush16","stackPush8","getFlags","read8","err","console","log","addr2","lo","hi","value","write8","tmpOamAddress","oamAddress","oam","stall","stack","stackPull8","flags","zp","Uint8Array","fill","ram","RENDERING_MODES","NORMAL","SPLIT","ABSOLUTE","ABSOLUTE_X","ABSOLUTE_Y","ACCUMULATOR","IMMEDIATE","IMPLIED","INDEXED_INDIRECT_X","INDIRECT","INDIRECT_INDEXED_Y","RELATIVE","ZERO_PAGE","ZERO_PAGE_X","ZERO_PAGE_Y","ADC","AND","ASL","BCC","BCS","BEQ","BIT","BMI","BNE","BPL","BRK","BVC","BVS","CLC","CLD","CLI","CLV","CMP","CPX","CPY","DEC","DEX","DEY","EOR","INC","INX","INY","JMP","JSR","LDA","LDX","LDY","LSR","NOP","ORA","PHA","PHP","PLA","PLP","ROL","ROR","RTI","RTS","SBC","SEC","SED","SEI","STA","STX","STY","TAX","TAY","TSX","TXA","TXS","TYA","ASL_ACC","LSR_ACC","ROL_ACC","ROR_ACC","SLO","KEYBOARD_KEYS","A","B","SELECT","START","UP","DOWN","LEFT","RIGHT","BUTTONS","COLORS","CYCLES","ZERO","ONE","PREFETCH","VISIBLE","SPRITES","COPY_Y","COPY_X","INCREMENT_Y","IDLE","FLUSH_TILEDATA","MAPPER_TICK","SCANLINES","PRELINE","VBLANK","DCP","ISC","read16indirect","isPageCrossed","addr1","setNegativeFlag","setZeroFlag","stackPull16","tmpA","tmpX","tmpY","tmpC","PPUMemory","cycle","cycleType","scanline","scanlineType","t","w","f","register","nmiOccurred","nmiOutput","backgroundTileBuffer","lowTileByte","highTileByte","attributeTableByte","spriteCount","sprites","Array","buffer","priority","index","registerRead","registerBuffer","fNameTable","fIncrement","fSpriteTable","fBackgroundTable","fSpriteSize","fMasterSlave","fGrayscale","fShowLeftBackground","fShowLeftSprites","fShowBackground","fShowSprites","fRedTint","fGreenTint","fBlueTint","fSpriteZeroHit","fSpriteOverflow","bufferedData","backgroundColor","spriteColor","spriteIndex","isBackgroundPixel","backgroundPixel","spritePixel","color","setRenderingMode","oamTable","patternTablesColors","Uint32Array","_from","to","patternTable","lowTileData","highTileData","s","_parsePatternTable","tile","table","spriteSize","attributes","address","tileShiftX","tileShiftY","tableY","isReversedVertically","isReversedHorizontally","sprite","getSpriteSize","tileY","tileX","flush","tileData","mode","renderingMode","normalRenderingMode","splitRenderingMode","cpuRead8","offset","pos","colorPos","setColorToBuffer","getCurrentBackgroundPixel","getCurrentSpritePixel","paletteTable","length","push","row","readTileRow","fetchSpriteRow","shift","fineY","nameTableByte","fetchAndStoreBackgroundRow","updateScrollingX","updateScrollingY","clearVerticalBlank","renderPixel","fetchAndStoreSpriteRows","setVerticalBlank","_cycleType","_scanlineType","doVBlankLine","doPreline","doVisibleLine","incrementCounters","NameTable","mirrors","parseInt","_resolve","PaletteTable","nameTable","mirrorType","HEADER_SIZE","PRG_BANK_SIZE","CHR_BANK_SIZE","dataBuffer","p","byteArray","header","subarray","nbrPRGBanks","nbrCHRBanks","mapperType","region","prgLength","chrLength","prg","chr","NROM","MMC1","UXROM","MMC3","switchBank","bankNbr","sram","warn","Mapper","BankMemory","windowSize","fixed","swapMode","pointers","o","p1","p2","_to","MMC1_MIRRORS","NAMETABLE_MIRRORS","SINGLE_SCREEN_0","SINGLE_SCREEN_1","VERTICAL","HORIZONTAL","bufferIndex","conf","prgBankMode","chrBankMode","control","BANK_SIZES","FOUR_SCREEN","MMC3_MIRRORS","bankRegister","irqCounter","irqLatch","irqEnable","isEven","buttons","strobe","document","addEventListener","keyDown","keyUp","event","keyCode","preventDefault","_checkInput","isObject","mergeDeep","item","isArray","target","sources","source","key","assign","observers","obs","filter","e","forEach","notify","fpsInterval","now","elapsed","then","Date"],"mappings":"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","file":"nes.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NES\"] = factory();\n\telse\n\t\troot[\"NES\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b944eeabe996a2caf426","import Console from \"./core/Console.js\";\n\nexport { Console };\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import CPU from \"./CPU\";\nimport PPU from \"./PPU\";\nimport ROM from \"./ROM\";\nimport APU from \"./APU\";\nimport Controller from \"./Controller\";\nimport { MODES, OPCODES, INTERRUPTS } from \"./constants.js\";\n\nimport { mergeDeep } from \"../utils/Merge\";\nimport Notifier from \"../utils/Notifier\";\nimport Throttle from \"../utils/Throttle\";\n\n/**\n * Main class for the emulator, controls the hardware emulation.\n * Fires up events.\n */\nclass Console extends Notifier {\n  constructor(fps = null) {\n    super();\n    this.cpu = new CPU();\n    this.ppu = new PPU();\n    this.apu = new APU();\n    this.controller = new Controller();\n    this.rom = null;\n    this.cycles = 0;\n    this.interrupt = null;\n    this.quickSaveData = null;\n\n    // CPU, APU, PPU and controller are cross referenced in the code\n    this.cpu.connect(\n      this.apu,\n      this.ppu,\n      this.controller\n    );\n    this.frameReq = null;\n\n    // Output & CPU throttling\n    this.frameThrottling = fps ? new Throttle(fps) : null;\n    this.nesThrottling = new Throttle(60);\n\n    // Debug variables\n    this.frameNbr = 0;\n    this.opCodesKeys = Object.keys(OPCODES);\n    this.modeKeys = Object.keys(MODES);\n  }\n\n  loadROM(data) {\n    this.rom = new ROM(data);\n    this.ppu.connectROM(this.rom);\n    this.reset();\n  }\n\n  getRomInfo() {\n    if (this.rom !== null) {\n      return this.rom.toJSON();\n    }\n\n    throw new Error(\"No active ROM found\");\n  }\n\n  reset() {\n    this.cpu.reset();\n    this.ppu.reset();\n    this.notifyObservers(\"nes-reset\", this.ppu.frameBuffer);\n  }\n\n  quickSave() {\n    // Ok so, this is a bit of a mess here\n    // Save also bundles the current ROM, and our memory buffers take a lot of place.\n    // localStorage has a strict threshold for what you can store.\n    // To work around this, Make a clone of the current NES object and empty the memory buffers\n    var quickSaveData = JSON.parse(JSON.stringify(this.cpu));\n\n    quickSaveData.ppu.frameBuffer = [];\n    quickSaveData.ppu.frameBackgroundBuffer = [];\n    quickSaveData.ppu.frameSpriteBuffer = [];\n    quickSaveData.ppu.frameColorBuffer = [];\n    quickSaveData.ppu.patternTable1 = [];\n    quickSaveData.ppu.patternTable2 = [];\n\n    this.notifyObservers(\"nes-quick-save\");\n    localStorage.quickSave = JSON.stringify(quickSaveData);\n  }\n\n  loadQuickSave(data) {\n    if (localStorage.quickSave) {\n      this.cpu = mergeDeep(this.cpu, JSON.parse(localStorage.quickSave));\n      this.cpu.ppu.resetBuffers();\n      this.notifyObservers(\"nes-load-quick-save\");\n    }\n  }\n\n  start() {\n    this._tick = this.tick;\n    this.frameReq = requestAnimationFrame(this.frame.bind(this));\n  }\n\n  startDebug() {\n    this._tick = this.tickDebug;\n    this.frameReq = requestAnimationFrame(this.frame.bind(this));\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameReq);\n  }\n\n  /**\n   *  Same a tick() but with additional notify calls for debug purposes.\n   *  Slows down the main loop which is why it needs a separate codepath\n   */\n  tickDebug() {\n    this.cycles = this.cpu.tick();\n    this.cycles = this.cycles * 3;\n\n    this.notifyObservers(\"cpu-tick\", [\n      this.cpu.instrCode,\n      this.opCodesKeys[this.cpu.instrOpCode],\n      this.modeKeys[this.cpu.instrMode],\n      this.cpu.instrSize,\n      this.cpu.instrCycles,\n      this.cpu.addr\n    ]);\n\n    for (; this.cycles > 0; this.cycles--) {\n      this.interrupt = this.ppu.tick();\n\n      if (this.interrupt !== null) {\n        if (this.interrupt === INTERRUPTS.NMI) {\n          this.cpu.triggerNMI();\n        } else if (this.interrupt === INTERRUPTS.IRQ) {\n          this.cpu.triggerIRQ();\n        }\n      }\n      // Check when next scanline is done\n\n      this.notifyObservers(\"ppu-tick\");\n\n      if (this.ppu.frameReady) {\n        this.notifyObservers(\"frame-ready\", this.ppu.frameBuffer);\n        this.notifyObservers(\"frame-ready-debug\");\n        this.ppu.acknowledgeFrame();\n        this.frameNbr++;\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  tick() {\n    this.cycles = this.cpu.tick();\n\n    for (let c = this.cycles; c > 0; c--) {\n      this.apu.tick();\n    }\n\n    for (let c = this.cycles * 3; c > 0; c--) {\n      this.interrupt = this.ppu.tick();\n\n      if (this.interrupt !== null) {\n        if (this.interrupt === INTERRUPTS.NMI) {\n          this.cpu.triggerNMI();\n        } else if (this.interrupt === INTERRUPTS.IRQ) {\n          this.cpu.triggerIRQ();\n        }\n      }\n\n      if (this.ppu.frameReady) {\n        if (!this.frameThrottling.isThrottled()) {\n          this.notifyObservers(\"frame-ready\", [\n            this.ppu.frameBuffer,\n            this.ppu.frameBackgroundBuffer,\n            this.ppu.frameSpriteBuffer,\n            this.ppu.frameColorBuffer\n          ]);\n        }\n        this.ppu.acknowledgeFrame();\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  frame() {\n    if (this.nesThrottling === null || !this.nesThrottling.isThrottled()) {\n      while (true) {\n        if (!this._tick()) {\n          break;\n        }\n      }\n    }\n    this.frameReq = requestAnimationFrame(this.frame.bind(this));\n  }\n}\n\nexport default Console;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Console.js","import CPUMemory from \"../core/CPUMemory\";\n\nimport { INTERRUPTS } from \"./constants.js\";\n\nimport { instructions } from \"./instructions.js\";\n\nimport { modes } from \"./modes.js\";\n\nimport { opcodes } from \"./opcodes.js\";\n\nclass CPU {\n  constructor() {\n    // Hardware connected to CPU\n    this.memory = new CPUMemory();\n    this.mapper = null;\n    this.apu = null;\n    this.ppu = null;\n    this.controller = null;\n\n    // Cycles Counter\n    this.cycles = 0;\n    // Branch counter used by some opcodes for extra cycles\n    // when pages are crossed\n    this.b = 0;\n\n    // Program Counter\n    this.pc = 0x00;\n    // Stack Pointer\n    this.sp = 0x00;\n\n    // Registers\n    this.a = 0;\n    this.x = 0;\n    this.y = 0;\n\n    // Flags\n    this.c = 0; // Carry flag\n    this.z = 0; // Zero flag\n    this.i = 0; // Interrupt flag\n    this.d = 0; // Decimal flag\n    // Break flag\n    this.v = 0; // Overflow flag\n    this.n = 0; // Negative flag\n    // Unused flag\n\n    // Interrupt type\n    this.interrupt = null;\n\n    this._modes = modes;\n    this._instructions = instructions;\n    this._opcodes = opcodes;\n\n    this.stallCounter = 0;\n\n    // Tick variables\n    this.tmpCycles = 0;\n    this.instrCycles = 0;\n    this.instrCode = 0;\n    this.instrOpCode = 0;\n    this.instrMode = 0;\n    this.instrSize = 0;\n    this.addr = 0;\n  }\n\n  /*\n\n  toJSON() {\n    return {\n      memory: this.memory.toJSON(),\n      cycles: this.cycles,\n      b: this.b,\n      pc: this.pc,\n      sp: this.sp,\n      a: this.a,\n      x: this.x,\n      y: this.y,\n      c: this.c,\n      z: this.z,\n      i: this.i,\n      d: this.d,\n      v: this.v,\n      n: this.n,\n      interrupt: this.interrupt,\n      stallCounter: this.stallCounter\n    };\n  }\n\n  */\n\n  loadJSON(obj) {}\n\n  connect(apu, ppu, controller) {\n    this.apu = apu;\n    this.ppu = ppu;\n    this.controller = controller;\n  }\n\n  connectROM(rom) {\n    // Improve that\n    // this.mapper = rom.mapper;\n    // this.mapper.cpu = this;\n  }\n\n  stall() {\n    if (this.cycles % 2 === 1) {\n      this.stallCounter += 514;\n    } else {\n      this.stallCounter += 513;\n    }\n  }\n\n  reset() {\n    this.cycles = 0;\n    this.a = 0;\n    this.x = 0;\n    this.y = 0;\n    this.interrupt = null;\n    this.stallCounter = 0;\n    this.pc = this.read16(0xfffc);\n    this.sp = 0xfd;\n    this.setFlags(0x24);\n  }\n\n  tick() {\n    this.tmpCycles = this.cycles;\n    this.b = 0;\n\n    // Stalled after PPU OAMDMA\n    if (this.stallCounter > 0) {\n      this.stallCounter--;\n      // Should return 1 but this somehow fixes some games.\n      // Probably due to CPU being not exactly accurate\n      // ¯\\_(ツ)_/¯\n      return 0;\n    }\n\n    // TODO Not DRY\n    if (this.interrupt !== null) {\n      switch (this.interrupt) {\n        case INTERRUPTS.NMI: {\n          this.stackPush16(this.pc);\n          this.stackPush8(this.getFlags() & ~0x10);\n          this.pc = this.read16(0xfffa);\n          this.i = 1;\n          this.cycles += 7;\n          break;\n        }\n        case INTERRUPTS.IRQ: {\n          if (this.i === 0) {\n            this.stackPush16(this.pc);\n            this.stackPush8(this.getFlags() & ~0x10);\n            this.pc = this.read16(0xfffe);\n            this.i = 1;\n            this.cycles += 7;\n          }\n          break;\n        }\n      }\n\n      this.interrupt = null;\n\n      return 7;\n    }\n\n    try {\n      this.instrCode = this.read8(this.pc);\n    } catch (err) {\n      throw new Error(\"Could not read next instruction: \" + err);\n    }\n\n    [\n      this.instrOpCode,\n      this.instrMode,\n      this.instrSize,\n      this.instrCycles\n    ] = this._instructions[this.instrCode];\n\n    this.addr = this._modes[this.instrMode](this);\n\n    this.pc += this.instrSize;\n    this.cycles += this.instrCycles;\n\n    this._opcodes[this.instrOpCode](this.addr, this);\n\n    return this.cycles - this.tmpCycles;\n  }\n\n  /**\n   * Interrupts\n   */\n  triggerNMI() {\n    this.interrupt = INTERRUPTS.NMI;\n  }\n\n  triggerIRQ() {\n    this.interrupt = INTERRUPTS.IRQ;\n  }\n\n  /**\n   * Read & Write methods\n   *\n   * CPU RAM: 0x0000 => 0x2000\n   * PPU Registers: 0x2000 => 0x4000\n   * Controller: 0x4016\n   * Controller2: 0x4016\n   * ROM Mapper: 0x6000 => 0x10000\n   */\n\n  read8(addr) {\n    if (addr < 0x2000) {\n      return this.memory.read8(addr);\n    } else if (addr < 0x4000) {\n      // 7 bytes PPU registers\n      // mirrored from 0x2000 to 0x4000\n      return this.ppu.read8(0x2000 + (addr % 8));\n    } else if (addr === 0x4014) {\n      return this.ppu.read8(addr);\n    } else if (addr === 0x4015) {\n      return this.apu.read8();\n    } else if (addr === 0x4016) {\n      return this.controller.read8();\n    } else if (addr === 0x4017) {\n      return 0;\n    } else if (addr < 0x6000) {\n      console.log(\"I/O REGISTERS\");\n      return 0;\n    } else {\n      return this.ppu.memory.mapper.read8(addr);\n    }\n  }\n\n  read16(addr) {\n    // Read two bytes and concatenate them\n    return (this.read8(addr + 1) << 8) | this.read8(addr);\n  }\n\n  read16indirect(addr) {\n    // Special read16 method for indirect mode reading (NES bug)\n    var addr2 = (addr & 0xff00) | (((addr & 0xff) + 1) & 0xff);\n    var lo = this.read8(addr);\n    var hi = this.read8(addr2);\n\n    return (hi << 8) | lo;\n  }\n\n  write8(addr, value) {\n    if (addr < 0x2000) {\n      this.memory.write8(addr, value);\n    } else if (addr < 0x4000) {\n      // 7 bytes PPU registers\n      // mirrored from 0x2000 to 0x4000\n      this.ppu.write8(0x2000 + (addr % 8), value);\n    } else if (addr === 0x4014) {\n      // This might seem a bit odd but this avoids circular reference (ppu using cpu methods)\n      addr = value << 8;\n      this.ppu.tmpOamAddress = this.ppu.oamAddress;\n\n      for (var i = 0; i < 256; i++) {\n        this.ppu.memory.oam[this.ppu.oamAddress] = this.read8(addr);\n        this.ppu.oamAddress++;\n        addr++;\n      }\n\n      this.ppu.oamAddress = this.ppu.tmpOamAddress;\n      this.stall();\n    } else if (addr === 0x4015) {\n      this.apu.write8(addr, value);\n    } else if (addr === 0x4016) {\n      this.controller.write8(value);\n    } else if (addr === 0x4017) {\n      // TODO sound\n    } else if (addr >= 0x6000) {\n      // Write to mapper (handled by PPU)\n      this.ppu.memory.mapper.write8(addr, value);\n    } else if (addr < 0x6000) {\n      // console.log('I/O REGISTERS');\n    }\n  }\n\n  /**\n   * Stack methods\n   */\n\n  stackPush8(value) {\n    this.memory.stack[this.sp] = value;\n    this.sp = (this.sp - 1) & 0xff;\n  }\n\n  stackPush16(value) {\n    // Get the 8 highest bits\n    // Truncate the 8 lower bits\n    // Push the two parts of `value`\n    this.stackPush8(value >> 8);\n    this.stackPush8(value & 0xff);\n  }\n\n  stackPull8(value) {\n    this.sp = (this.sp + 1) & 0xff;\n    return this.memory.stack[this.sp];\n  }\n\n  stackPull16(value) {\n    return this.stackPull8() | (this.stackPull8() << 8);\n  }\n\n  /**\n   * Flag methods\n   */\n\n  setZeroFlag(value) {\n    if (value === 0) {\n      this.z = 1;\n    } else {\n      this.z = 0;\n    }\n  }\n\n  setNegativeFlag(value) {\n    if ((value & 0x80) !== 0) {\n      this.n = 1;\n    } else {\n      this.n = 0;\n    }\n  }\n\n  getFlags() {\n    // Concatenate the values of the flags in an int\n    var flags = 0;\n\n    flags = flags | (this.c << 0);\n    flags = flags | (this.z << 1);\n    flags = flags | (this.i << 2);\n    flags = flags | (this.d << 3);\n    flags = flags | (0 << 4);\n    flags = flags | (1 << 5);\n    flags = flags | (this.v << 6);\n    flags = flags | (this.n << 7);\n\n    return flags;\n  }\n\n  setFlags(value) {\n    this.c = (value >> 0) & 1;\n    this.z = (value >> 1) & 1;\n    this.i = (value >> 2) & 1;\n    this.d = (value >> 3) & 1;\n    this.v = (value >> 6) & 1;\n    this.n = (value >> 7) & 1;\n  }\n}\n\nexport default CPU;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/CPU.js","/**\n * CPU RAM: 0x0000 => 0x2000\n */\nclass CPUMemory {\n  constructor() {\n    this.zp = new Uint8Array(256).fill(0xff);\n    this.stack = new Uint8Array(256).fill(0xff);\n    this.ram = new Uint8Array(1536).fill(0xff);\n  }\n\n  /*\n  toJSON() {\n    return {\n      zp: this.zp,\n      stack: this.stack,\n      ram: this.ram\n    };\n  } */\n\n  read8(addr) {\n    // 2k bits RAM\n    // mirrored 4 times\n    addr = addr % 0x800;\n\n    if (addr < 0x100) {\n      return this.zp[addr];\n    } else if (addr < 0x200) {\n      return this.stack[addr - 0x100];\n    } else {\n      return this.ram[addr - 0x200];\n    }\n  }\n\n  write8(addr, value) {\n    // 2k bits RAM\n    // mirrored 4 times\n    addr = addr % 0x800;\n\n    if (addr < 0x0100) {\n      this.zp[addr] = value;\n    } else if (addr < 0x0200) {\n      this.stack[addr - 0x100] = value;\n    } else {\n      this.ram[addr - 0x200] = value;\n    }\n  }\n}\n\nexport default CPUMemory;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/CPUMemory.js","export var RENDERING_MODES = {\n  NORMAL: 0,\n  SPLIT: 1\n};\n\nexport var MODES = {\n  ABSOLUTE: 0,\n  ABSOLUTE_X: 1,\n  ABSOLUTE_Y: 2,\n  ACCUMULATOR: 3,\n  IMMEDIATE: 4,\n  IMPLIED: 5,\n  INDEXED_INDIRECT_X: 6,\n  INDIRECT: 7,\n  INDIRECT_INDEXED_Y: 8,\n  RELATIVE: 9,\n  ZERO_PAGE: 10,\n  ZERO_PAGE_X: 11,\n  ZERO_PAGE_Y: 12\n};\n\nexport var OPCODES = {\n  ADC: 0,\n  AND: 1,\n  ASL: 2,\n  BCC: 3,\n  BCS: 4,\n  BEQ: 5,\n  BIT: 6,\n  BMI: 7,\n  BNE: 8,\n  BPL: 9,\n  BRK: 10,\n  BVC: 11,\n  BVS: 12,\n  CLC: 13,\n  CLD: 14,\n  CLI: 15,\n  CLV: 16,\n  CMP: 17,\n  CPX: 18,\n  CPY: 19,\n  DEC: 20,\n  DEX: 21,\n  DEY: 22,\n  EOR: 23,\n  INC: 24,\n  INX: 25,\n  INY: 26,\n  JMP: 27,\n  JSR: 28,\n  LDA: 29,\n  LDX: 30,\n  LDY: 31,\n  LSR: 32,\n  NOP: 33,\n  ORA: 34,\n  PHA: 35,\n  PHP: 36,\n  PLA: 37,\n  PLP: 38,\n  ROL: 39,\n  ROR: 40,\n  RTI: 41,\n  RTS: 42,\n  SBC: 43,\n  SEC: 44,\n  SED: 45,\n  SEI: 46,\n  STA: 47,\n  STX: 48,\n  STY: 49,\n  TAX: 50,\n  TAY: 51,\n  TSX: 52,\n  TXA: 53,\n  TXS: 54,\n  TYA: 55,\n\n  ASL_ACC: 56,\n  LSR_ACC: 57,\n  ROL_ACC: 58,\n  ROR_ACC: 59,\n\n  // TODO: Unused opcodes\n  SLO: 60\n};\n\nexport var INTERRUPTS = {\n  NMI: 0,\n  IRQ: 1\n};\n\nexport var KEYBOARD_KEYS = {\n  A: 88,\n  B: 67,\n  SELECT: 16,\n  START: 13,\n  UP: 38,\n  DOWN: 40,\n  LEFT: 37,\n  RIGHT: 39\n}\n\nexport var BUTTONS = {\n  A: 0,\n  B: 1,\n  SELECT: 2,\n  START: 3,\n  UP: 4,\n  DOWN: 5,\n  LEFT: 6,\n  RIGHT: 7\n};\n\nexport var COLORS = [\n  0x666666,\n  0x002a88,\n  0x1412a7,\n  0x3b00a4,\n  0x5c007e,\n  0x6e0040,\n  0x6c0600,\n  0x561d00,\n  0x333500,\n  0x0b4800,\n  0x005200,\n  0x004f08,\n  0x00404d,\n  0x000000,\n  0x000000,\n  0x000000,\n  0xadadad,\n  0x155fd9,\n  0x4240ff,\n  0x7527fe,\n  0xa01acc,\n  0xb71e7b,\n  0xb53120,\n  0x994e00,\n  0x6b6d00,\n  0x388700,\n  0x0c9300,\n  0x008f32,\n  0x007c8d,\n  0x000000,\n  0x000000,\n  0x000000,\n  0xfffeff,\n  0x64b0ff,\n  0x9290ff,\n  0xc676ff,\n  0xf36aff,\n  0xfe6ecc,\n  0xfe8170,\n  0xea9e22,\n  0xbcbe00,\n  0x88d800,\n  0x5ce430,\n  0x45e082,\n  0x48cdde,\n  0x4f4f4f,\n  0x000000,\n  0x000000,\n  0xfffeff,\n  0xc0dfff,\n  0xd3d2ff,\n  0xe8c8ff,\n  0xfbc2ff,\n  0xfec4ea,\n  0xfeccc5,\n  0xf7d8a5,\n  0xe4e594,\n  0xcfef96,\n  0xbdf4ab,\n  0xb3f3cc,\n  0xb5ebf2,\n  0xb8b8b8,\n  0x000000,\n  0x000000\n];\n\nexport var CYCLES = {\n  ZERO: 0,\n  ONE: 1,\n  PREFETCH: 2,\n  VISIBLE: 3,\n  SPRITES: 4,\n  COPY_Y: 5,\n  COPY_X: 6,\n  INCREMENT_Y: 7,\n  IDLE: 8,\n  FLUSH_TILEDATA: 9,\n  MAPPER_TICK: 10\n};\n\nexport var SCANLINES = {\n  PRELINE: 0,\n  VISIBLE: 1,\n  VBLANK: 2,\n  IDLE: 3\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/constants.js","import { OPCODES, MODES } from \"./constants.js\";\n\n// TODO: Non official instructions\nexport const instructions = {\n  0: [OPCODES.BRK, MODES.IMPLIED, 1, 7],\n  1: [OPCODES.ORA, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 2: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  3: [OPCODES.SLO, MODES.INDEXED_INDIRECT_X, 0, 8],\n  // 4: [ OPCODES.NOP, MODES.ZERO_PAGE, 2, 3 ],\n\n  5: [OPCODES.ORA, MODES.ZERO_PAGE, 2, 3],\n  6: [OPCODES.ASL, MODES.ZERO_PAGE, 2, 5],\n  7: [OPCODES.SLO, MODES.ZERO_PAGE, 0, 5],\n  8: [OPCODES.PHP, MODES.IMPLIED, 1, 3],\n  9: [OPCODES.ORA, MODES.IMMEDIATE, 2, 2],\n  10: [OPCODES.ASL_ACC, MODES.ACCUMULATOR, 1, 2],\n  // 11: [ OPCODES.ANC, MODES.IMMEDIATE, 0, 2 ],\n  // 12: [ OPCODES.NOP, MODES.ABSOLUTE, 3, 4 ],\n\n  13: [OPCODES.ORA, MODES.ABSOLUTE, 3, 4],\n  14: [OPCODES.ASL, MODES.ABSOLUTE, 3, 6],\n  15: [OPCODES.SLO, MODES.ABSOLUTE, 0, 6],\n  16: [OPCODES.BPL, MODES.RELATIVE, 2, 2],\n  17: [OPCODES.ORA, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 18: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  19: [OPCODES.SLO, MODES.INDIRECT_INDEXED_Y, 0, 8],\n  // 20: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  21: [OPCODES.ORA, MODES.ZERO_PAGE_X, 2, 4],\n  22: [OPCODES.ASL, MODES.ZERO_PAGE_X, 2, 6],\n  23: [OPCODES.SLO, MODES.ZERO_PAGE_X, 0, 6],\n  24: [OPCODES.CLC, MODES.IMPLIED, 1, 2],\n  25: [OPCODES.ORA, MODES.ABSOLUTE_Y, 3, 4],\n  // 26: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  27: [OPCODES.SLO, MODES.ABSOLUTE_Y, 0, 7],\n  // 28: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  29: [OPCODES.ORA, MODES.ABSOLUTE_X, 3, 4],\n  30: [OPCODES.ASL, MODES.ABSOLUTE_X, 3, 7],\n  31: [OPCODES.SLO, MODES.ABSOLUTE_X, 0, 7],\n  32: [OPCODES.JSR, MODES.ABSOLUTE, 3, 6],\n  33: [OPCODES.AND, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 34: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 35: [ OPCODES.RLA, MODES.INDEXED_INDIRECT_X, 0, 8 ],\n  36: [OPCODES.BIT, MODES.ZERO_PAGE, 2, 3],\n  37: [OPCODES.AND, MODES.ZERO_PAGE, 2, 3],\n  38: [OPCODES.ROL, MODES.ZERO_PAGE, 2, 5],\n  // 39: [ OPCODES.RLA, MODES.ZERO_PAGE, 0, 5 ],\n  40: [OPCODES.PLP, MODES.IMPLIED, 1, 4],\n  41: [OPCODES.AND, MODES.IMMEDIATE, 2, 2],\n  42: [OPCODES.ROL_ACC, MODES.ACCUMULATOR, 1, 2],\n  // 43: [ OPCODES.ANC, MODES.IMMEDIATE, 0, 2 ],\n  44: [OPCODES.BIT, MODES.ABSOLUTE, 3, 4],\n  45: [OPCODES.AND, MODES.ABSOLUTE, 3, 4],\n  46: [OPCODES.ROL, MODES.ABSOLUTE, 3, 6],\n  // 47: [ OPCODES.RLA, MODES.ABSOLUTE, 0, 6 ],\n  48: [OPCODES.BMI, MODES.RELATIVE, 2, 2],\n  49: [OPCODES.AND, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 50: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 51: [ OPCODES.RLA, MODES.INDIRECT_INDEXED_Y, 0, 8 ],\n  // 52: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  53: [OPCODES.AND, MODES.ZERO_PAGE_X, 2, 4],\n  54: [OPCODES.ROL, MODES.ZERO_PAGE_X, 2, 6],\n  // 55: [ OPCODES.RLA, MODES.ZERO_PAGE_X, 0, 6 ],\n  56: [OPCODES.SEC, MODES.IMPLIED, 1, 2],\n  57: [OPCODES.AND, MODES.ABSOLUTE_Y, 3, 4],\n  // 58: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  // 59: [ OPCODES.RLA, MODES.ABSOLUTE_Y, 0, 7 ],\n  // 60: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  61: [OPCODES.AND, MODES.ABSOLUTE_X, 3, 4],\n  62: [OPCODES.ROL, MODES.ABSOLUTE_X, 3, 7],\n  // 63: [ OPCODES.RLA, MODES.ABSOLUTE_X, 0, 7 ],\n  64: [OPCODES.RTI, MODES.IMPLIED, 1, 6],\n  65: [OPCODES.EOR, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 66: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 67: [ OPCODES.SRE, MODES.INDEXED_INDIRECT_X, 0, 8 ],\n  // 68: [ OPCODES.NOP, MODES.ZERO_PAGE, 2, 3 ],\n\n  69: [OPCODES.EOR, MODES.ZERO_PAGE, 2, 3],\n  70: [OPCODES.LSR, MODES.ZERO_PAGE, 2, 5],\n  // 71: [ OPCODES.SRE, MODES.ZERO_PAGE, 0, 5 ],\n  72: [OPCODES.PHA, MODES.IMPLIED, 1, 3],\n  73: [OPCODES.EOR, MODES.IMMEDIATE, 2, 2],\n  74: [OPCODES.LSR_ACC, MODES.ACCUMULATOR, 1, 2],\n  // 75: [ OPCODES.ALR, MODES.IMMEDIATE, 0, 2 ],\n  76: [OPCODES.JMP, MODES.ABSOLUTE, 3, 3],\n  77: [OPCODES.EOR, MODES.ABSOLUTE, 3, 4],\n  78: [OPCODES.LSR, MODES.ABSOLUTE, 3, 6],\n  // 79: [ OPCODES.SRE, MODES.ABSOLUTE, 0, 6 ],\n  80: [OPCODES.BVC, MODES.RELATIVE, 2, 2],\n  81: [OPCODES.EOR, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 82: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 83: [ OPCODES.SRE, MODES.INDIRECT_INDEXED_Y, 0, 8 ],\n  // 84: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  85: [OPCODES.EOR, MODES.ZERO_PAGE_X, 2, 4],\n  86: [OPCODES.LSR, MODES.ZERO_PAGE_X, 2, 6],\n  // 87: [ OPCODES.SRE, MODES.ZERO_PAGE_X, 0, 6 ],\n  88: [OPCODES.CLI, MODES.IMPLIED, 1, 2],\n  89: [OPCODES.EOR, MODES.ABSOLUTE_Y, 3, 4],\n  // 90: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  // 91: [ OPCODES.SRE, MODES.ABSOLUTE_Y, 0, 7 ],\n  // 92: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  93: [OPCODES.EOR, MODES.ABSOLUTE_X, 3, 4],\n  94: [OPCODES.LSR, MODES.ABSOLUTE_X, 3, 7],\n  // 95: [ OPCODES.SRE, MODES.ABSOLUTE_X, 0, 7 ],\n  96: [OPCODES.RTS, MODES.IMPLIED, 1, 6],\n  97: [OPCODES.ADC, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 98: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 99: [ OPCODES.RRA, MODES.INDEXED_INDIRECT_X, 0, 8 ],\n  // 100: [ OPCODES.NOP, MODES.ZERO_PAGE, 2, 3 ],\n\n  101: [OPCODES.ADC, MODES.ZERO_PAGE, 2, 3],\n  102: [OPCODES.ROR, MODES.ZERO_PAGE, 2, 5],\n  // 103: [ OPCODES.RRA, MODES.ZERO_PAGE, 0, 5 ],\n  104: [OPCODES.PLA, MODES.IMPLIED, 1, 4],\n  105: [OPCODES.ADC, MODES.IMMEDIATE, 2, 2],\n  106: [OPCODES.ROR_ACC, MODES.ACCUMULATOR, 1, 2],\n  // 107: [ OPCODES.ARR, MODES.IMMEDIATE, 0, 2 ],\n  108: [OPCODES.JMP, MODES.INDIRECT, 3, 5],\n  109: [OPCODES.ADC, MODES.ABSOLUTE, 3, 4],\n  110: [OPCODES.ROR, MODES.ABSOLUTE, 3, 6],\n  // 111: [ OPCODES.RRA, MODES.ABSOLUTE, 0, 6 ],\n  112: [OPCODES.BVS, MODES.RELATIVE, 2, 2],\n  113: [OPCODES.ADC, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 114: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 115: [ OPCODES.RRA, MODES.INDIRECT_INDEXED_Y, 0, 8 ],\n  // 116: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  117: [OPCODES.ADC, MODES.ZERO_PAGE_X, 2, 4],\n  118: [OPCODES.ROR, MODES.ZERO_PAGE_X, 2, 6],\n  // 119: [ OPCODES.RRA, MODES.ZERO_PAGE_X, 0, 6 ],\n  120: [OPCODES.SEI, MODES.IMPLIED, 1, 2],\n  121: [OPCODES.ADC, MODES.ABSOLUTE_Y, 3, 4],\n  // 122: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  // 123: [ OPCODES.RRA, MODES.ABSOLUTE_Y, 0, 7 ],\n  // 124: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  125: [OPCODES.ADC, MODES.ABSOLUTE_X, 3, 4],\n  126: [OPCODES.ROR, MODES.ABSOLUTE_X, 3, 7],\n  // 127: [ OPCODES.RRA, MODES.ABSOLUTE_X, 0, 7 ],\n  // 128: [ OPCODES.NOP, MODES.IMMEDIATE, 2, 2 ],\n\n  129: [OPCODES.STA, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 130: [ OPCODES.NOP, MODES.IMMEDIATE, 0, 2 ],\n\n  // 131: [ OPCODES.SAX, MODES.INDEXED_INDIRECT_X, 0, 6 ],\n  132: [OPCODES.STY, MODES.ZERO_PAGE, 2, 3],\n  133: [OPCODES.STA, MODES.ZERO_PAGE, 2, 3],\n  134: [OPCODES.STX, MODES.ZERO_PAGE, 2, 3],\n  // 135: [ OPCODES.SAX, MODES.ZERO_PAGE, 0, 3 ],\n  136: [OPCODES.DEY, MODES.IMPLIED, 1, 2],\n  // 137: [ OPCODES.NOP, MODES.IMMEDIATE, 0, 2 ],\n\n  138: [OPCODES.TXA, MODES.IMPLIED, 1, 2],\n  // 139: [ OPCODES.XAA, MODES.IMMEDIATE, 0, 2 ],\n  140: [OPCODES.STY, MODES.ABSOLUTE, 3, 4],\n  141: [OPCODES.STA, MODES.ABSOLUTE, 3, 4],\n  142: [OPCODES.STX, MODES.ABSOLUTE, 3, 4],\n  // 143: [ OPCODES.SAX, MODES.ABSOLUTE, 0, 4 ],\n  144: [OPCODES.BCC, MODES.RELATIVE, 2, 2],\n  145: [OPCODES.STA, MODES.INDIRECT_INDEXED_Y, 2, 6],\n  // 146: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 147: [ OPCODES.AHX, MODES.INDIRECT_INDEXED_Y, 0, 6 ],\n  148: [OPCODES.STY, MODES.ZERO_PAGE_X, 2, 4],\n  149: [OPCODES.STA, MODES.ZERO_PAGE_X, 2, 4],\n  150: [OPCODES.STX, MODES.ZERO_PAGE_Y, 2, 4],\n  // 151: [ OPCODES.SAX, MODES.ZERO_PAGE_Y, 0, 4 ],\n  152: [OPCODES.TYA, MODES.IMPLIED, 1, 2],\n  153: [OPCODES.STA, MODES.ABSOLUTE_Y, 3, 5],\n  154: [OPCODES.TXS, MODES.IMPLIED, 1, 2],\n  // 155: [ OPCODES.TAS, MODES.ABSOLUTE_Y, 0, 5 ],\n  // 156: [ OPCODES.SHY, MODES.ABSOLUTE_X, 0, 5 ],\n  157: [OPCODES.STA, MODES.ABSOLUTE_X, 3, 5],\n  // 158: [ OPCODES.SHX, MODES.ABSOLUTE_Y, 0, 5 ],\n  // 159: [ OPCODES.AHX, MODES.ABSOLUTE_Y, 0, 5 ],\n  160: [OPCODES.LDY, MODES.IMMEDIATE, 2, 2],\n  161: [OPCODES.LDA, MODES.INDEXED_INDIRECT_X, 2, 6],\n  162: [OPCODES.LDX, MODES.IMMEDIATE, 2, 2],\n  // 163: [ OPCODES.LAX, MODES.INDEXED_INDIRECT_X, 0, 6 ],\n  164: [OPCODES.LDY, MODES.ZERO_PAGE, 2, 3],\n  165: [OPCODES.LDA, MODES.ZERO_PAGE, 2, 3],\n  166: [OPCODES.LDX, MODES.ZERO_PAGE, 2, 3],\n  // 167: [ OPCODES.LAX, MODES.ZERO_PAGE, 0, 3 ],\n  168: [OPCODES.TAY, MODES.IMPLIED, 1, 2],\n  169: [OPCODES.LDA, MODES.IMMEDIATE, 2, 2],\n  170: [OPCODES.TAX, MODES.IMPLIED, 1, 2],\n  // 171: [ OPCODES.LAX, MODES.IMMEDIATE, 0, 2 ],\n  172: [OPCODES.LDY, MODES.ABSOLUTE, 3, 4],\n  173: [OPCODES.LDA, MODES.ABSOLUTE, 3, 4],\n  174: [OPCODES.LDX, MODES.ABSOLUTE, 3, 4],\n  // 175: [ OPCODES.LAX, MODES.ABSOLUTE, 0, 4 ],\n  176: [OPCODES.BCS, MODES.RELATIVE, 2, 2],\n  177: [OPCODES.LDA, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 178: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 179: [ OPCODES.LAX, MODES.INDIRECT_INDEXED_Y, 0, 5 ],\n  180: [OPCODES.LDY, MODES.ZERO_PAGE_X, 2, 4],\n  181: [OPCODES.LDA, MODES.ZERO_PAGE_X, 2, 4],\n  182: [OPCODES.LDX, MODES.ZERO_PAGE_Y, 2, 4],\n  // 183: [ OPCODES.LAX, MODES.ZERO_PAGE_Y, 0, 4 ],\n  184: [OPCODES.CLV, MODES.IMPLIED, 1, 2],\n  185: [OPCODES.LDA, MODES.ABSOLUTE_Y, 3, 4],\n  186: [OPCODES.TSX, MODES.IMPLIED, 1, 2],\n  // 187: [ OPCODES.LAS, MODES.ABSOLUTE_Y, 0, 4 ],\n  188: [OPCODES.LDY, MODES.ABSOLUTE_X, 3, 4],\n  189: [OPCODES.LDA, MODES.ABSOLUTE_X, 3, 4],\n  190: [OPCODES.LDX, MODES.ABSOLUTE_Y, 3, 4],\n  // 191: [ OPCODES.LAX, MODES.ABSOLUTE_Y, 0, 4 ],\n  192: [OPCODES.CPY, MODES.IMMEDIATE, 2, 2],\n  193: [OPCODES.CMP, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 194: [ OPCODES.NOP, MODES.IMMEDIATE, 0, 2 ],\n\n  // 195: [ OPCODES.DCP, MODES.INDEXED_INDIRECT_X, 0, 8 ],\n  196: [OPCODES.CPY, MODES.ZERO_PAGE, 2, 3],\n  197: [OPCODES.CMP, MODES.ZERO_PAGE, 2, 3],\n  198: [OPCODES.DEC, MODES.ZERO_PAGE, 2, 5],\n  199: [OPCODES.DCP, MODES.ZERO_PAGE, 0, 5],\n  200: [OPCODES.INY, MODES.IMPLIED, 1, 2],\n  201: [OPCODES.CMP, MODES.IMMEDIATE, 2, 2],\n  202: [OPCODES.DEX, MODES.IMPLIED, 1, 2],\n  // 203: [ OPCODES.AXS, MODES.IMMEDIATE, 0, 2 ],\n  204: [OPCODES.CPY, MODES.ABSOLUTE, 3, 4],\n  205: [OPCODES.CMP, MODES.ABSOLUTE, 3, 4],\n  206: [OPCODES.DEC, MODES.ABSOLUTE, 3, 6],\n  // 207: [ OPCODES.DCP, MODES.ABSOLUTE, 0, 6 ],\n  208: [OPCODES.BNE, MODES.RELATIVE, 2, 2],\n  209: [OPCODES.CMP, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 210: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 211: [ OPCODES.DCP, MODES.INDIRECT_INDEXED_Y, 0, 8 ],\n  // 212: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  213: [OPCODES.CMP, MODES.ZERO_PAGE_X, 2, 4],\n  214: [OPCODES.DEC, MODES.ZERO_PAGE_X, 2, 6],\n  // 215: [ OPCODES.DCP, MODES.ZERO_PAGE_X, 0, 6 ],\n  216: [OPCODES.CLD, MODES.IMPLIED, 1, 2],\n  217: [OPCODES.CMP, MODES.ABSOLUTE_Y, 3, 4],\n  // 218: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  // 219: [ OPCODES.DCP, MODES.ABSOLUTE_Y, 0, 7 ],\n  // 220: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  221: [OPCODES.CMP, MODES.ABSOLUTE_X, 3, 4],\n  222: [OPCODES.DEC, MODES.ABSOLUTE_X, 3, 7],\n  // 223: [ OPCODES.DCP, MODES.ABSOLUTE_X, 0, 7 ],\n  224: [OPCODES.CPX, MODES.IMMEDIATE, 2, 2],\n  225: [OPCODES.SBC, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 226: [ OPCODES.NOP, MODES.IMMEDIATE, 0, 2 ],\n\n  // 227: [ OPCODES.ISC, MODES.INDEXED_INDIRECT_X, 0, 8 ],\n  228: [OPCODES.CPX, MODES.ZERO_PAGE, 2, 3],\n  229: [OPCODES.SBC, MODES.ZERO_PAGE, 2, 3],\n  230: [OPCODES.INC, MODES.ZERO_PAGE, 2, 5],\n  // 231: [ OPCODES.ISC, MODES.ZERO_PAGE, 0, 5 ],\n  232: [OPCODES.INX, MODES.IMPLIED, 1, 2],\n  233: [OPCODES.SBC, MODES.IMMEDIATE, 2, 2],\n  234: [OPCODES.NOP, MODES.IMPLIED, 1, 2],\n\n  235: [OPCODES.SBC, MODES.IMMEDIATE, 2, 2],\n  236: [OPCODES.CPX, MODES.ABSOLUTE, 3, 4],\n  237: [OPCODES.SBC, MODES.ABSOLUTE, 3, 4],\n  238: [OPCODES.INC, MODES.ABSOLUTE, 3, 6],\n  239: [OPCODES.ISC, MODES.ABSOLUTE, 0, 6],\n  240: [OPCODES.BEQ, MODES.RELATIVE, 2, 2],\n  241: [OPCODES.SBC, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 242: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 243: [ OPCODES.ISC, MODES.INDIRECT_INDEXED_Y, 0, 8 ],\n  // 244: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  245: [OPCODES.SBC, MODES.ZERO_PAGE_X, 2, 4],\n  246: [OPCODES.INC, MODES.ZERO_PAGE_X, 2, 6],\n  247: [OPCODES.ISC, MODES.ZERO_PAGE_X, 0, 6],\n  248: [OPCODES.SED, MODES.IMPLIED, 1, 2],\n  249: [OPCODES.SBC, MODES.ABSOLUTE_Y, 3, 4],\n  // 250: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  // 251: [ OPCODES.ISC, MODES.ABSOLUTE_Y, 0, 7 ],\n  // 252: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  253: [OPCODES.SBC, MODES.ABSOLUTE_X, 3, 4],\n  254: [OPCODES.INC, MODES.ABSOLUTE_X, 3, 7]\n  // 255: [ OPCODES.ISC, MODES.ABSOLUTE_X, 0, 7 ]\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/instructions.js","import { MODES } from \"./constants.js\";\n\nimport { isPageCrossed } from \"./utils.js\";\n\n/**\n *   Computes and returns a memory address (max 16bit)\n *   http://wiki.nesdev.com/w/index.php/CPU_addressing_modes\n */\nexport var modes = {\n  [MODES.IMMEDIATE]: cpu => {\n    return cpu.pc + 1;\n  },\n  [MODES.ABSOLUTE]: cpu => {\n    return cpu.read16(cpu.pc + 1);\n  },\n  [MODES.ABSOLUTE_X]: cpu => {\n    var addr = (cpu.read16(cpu.pc + 1) + cpu.x) & 0xffff;\n\n    if (isPageCrossed(addr - cpu.x, addr)) {\n      cpu.b = 1;\n    }\n\n    return addr;\n  },\n  [MODES.ABSOLUTE_Y]: cpu => {\n    var addr = (cpu.read16(cpu.pc + 1) + cpu.y) & 0xffff;\n\n    if (isPageCrossed(addr - cpu.y, addr)) {\n      cpu.b = 1;\n    }\n\n    return addr;\n  },\n  [MODES.ACCUMULATOR]: cpu => {\n    return cpu.a;\n  },\n  [MODES.IMPLIED]: cpu => {\n    return 0;\n  },\n  [MODES.RELATIVE]: cpu => {\n    var addr = cpu.read8(cpu.pc + 1);\n\n    if (addr < 0x80) {\n      return addr + cpu.pc + 2;\n    } else {\n      return addr + cpu.pc + 2 - 0x100;\n    }\n  },\n  [MODES.ZERO_PAGE_Y]: cpu => {\n    return (cpu.read8(cpu.pc + 1) + cpu.y) & 0xff;\n  },\n  [MODES.ZERO_PAGE_X]: cpu => {\n    return (cpu.read8(cpu.pc + 1) + cpu.x) & 0xff;\n  },\n  [MODES.ZERO_PAGE]: cpu => {\n    return cpu.read8(cpu.pc + 1);\n  },\n  [MODES.INDEXED_INDIRECT_X]: cpu => {\n    return cpu.read16indirect((cpu.read8(cpu.pc + 1) + cpu.x) & 0xff);\n  },\n  [MODES.INDIRECT_INDEXED_Y]: cpu => {\n    var addr = (cpu.read16indirect(cpu.read8(cpu.pc + 1)) + cpu.y) & 0xffff;\n\n    if (isPageCrossed(addr - cpu.y, addr)) {\n      cpu.b = 1;\n    }\n\n    return addr;\n  },\n  // TODO: Indirect jump is bugged on the NES, dig/adapt\n  [MODES.INDIRECT]: cpu => {\n    return cpu.read16indirect(cpu.read16(cpu.pc + 1));\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/modes.js","export function isPageCrossed(addr1, addr2) {\n  // A page is crossed when the high byte differs from addr1 to addr2\n  return addr1 >> 8 !== addr2 >> 8;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/utils.js","import { OPCODES } from \"./constants.js\";\n\nimport { isPageCrossed } from \"./utils.js\";\n\nexport var opcodes = {\n  /**\n   *     http://obelisk.me.uk/6502/reference.html\n   */\n\n  // Add with Carry\n  [OPCODES.ADC]: (addr, cpu) => {\n    var a = cpu.a;\n    var value = cpu.read8(addr);\n    cpu.a = a + value + cpu.c;\n\n    if (cpu.a > 0xff) {\n      cpu.c = 1;\n    } else {\n      cpu.c = 0;\n    }\n\n    // Useless?\n    cpu.a = cpu.a & 0xff;\n\n    if (((a ^ value) & 0x80) === 0 && ((a ^ cpu.a) & 0x80) !== 0) {\n      cpu.v = 1;\n    } else {\n      cpu.v = 0;\n    }\n\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Set Interrupt Disable\n  [OPCODES.SEI]: (addr, cpu) => {\n    cpu.i = 1;\n  },\n\n  // Clear Carry Flag\n  [OPCODES.CLC]: (addr, cpu) => {\n    cpu.c = 0;\n  },\n\n  // Clear Overflow Flag\n  [OPCODES.CLV]: (addr, cpu) => {\n    cpu.v = 0;\n  },\n\n  // Transfer Stack pointer to X\n  [OPCODES.TSX]: (addr, cpu) => {\n    cpu.x = cpu.sp;\n    cpu.setNegativeFlag(cpu.x);\n    cpu.setZeroFlag(cpu.x);\n  },\n\n  // Transfer Accumulator to X\n  [OPCODES.TAX]: (addr, cpu) => {\n    cpu.x = cpu.a;\n    cpu.setNegativeFlag(cpu.x);\n    cpu.setZeroFlag(cpu.x);\n  },\n\n  // Pull Accumulator\n  [OPCODES.PLA]: (addr, cpu) => {\n    cpu.a = cpu.stackPull8();\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n  },\n\n  // Decrement Memory\n  [OPCODES.DEC]: (addr, cpu) => {\n    var value = cpu.read8(addr);\n    value = (value - 1) & 0xff;\n\n    cpu.setNegativeFlag(value);\n    cpu.setZeroFlag(value);\n    cpu.write8(addr, value);\n  },\n\n  // Decrement Y Register\n  [OPCODES.DEY]: (addr, cpu) => {\n    cpu.y = (cpu.y - 1) & 0xff;\n    cpu.setNegativeFlag(cpu.y);\n    cpu.setZeroFlag(cpu.y);\n  },\n\n  // Decrement X Register\n  [OPCODES.DEX]: (addr, cpu) => {\n    cpu.x = (cpu.x - 1) & 0xff;\n    cpu.setZeroFlag(cpu.x);\n    cpu.setNegativeFlag(cpu.x);\n  },\n\n  // Transfer X to Stack Pointer\n  [OPCODES.TXS]: (addr, cpu) => {\n    cpu.sp = cpu.x;\n  },\n\n  // Transfer X to A\n  [OPCODES.TXA]: (addr, cpu) => {\n    cpu.a = cpu.x;\n    cpu.setZeroFlag(cpu.a);\n    cpu.setNegativeFlag(cpu.a);\n  },\n\n  // Clear Decimal Mode\n  [OPCODES.CLD]: (addr, cpu) => {\n    cpu.d = 0;\n  },\n\n  // Push Processor Status\n  [OPCODES.PHP]: (addr, cpu) => {\n    cpu.stackPush8(cpu.getFlags() | 0x10);\n  },\n\n  // Force Interrupt\n  // TODO: http://nesdev.com/the%20'B'%20flag%20&%20BRK%20instruction.txt\n  [OPCODES.BRK]: (addr, cpu) => {\n    cpu.stackPush16(cpu.pc + 1);\n    // PHP\n    cpu.stackPush8(cpu.getFlags() | 0x18);\n    // SEI\n    cpu.i = 1;\n    cpu.pc = cpu.read16(0xfffe);\n  },\n\n  // Jump to subroutine\n  [OPCODES.JSR]: (addr, cpu) => {\n    cpu.stackPush16(cpu.pc - 1);\n    cpu.pc = addr & 0xffff;\n  },\n\n  // Branch if Overflow clear\n  [OPCODES.BVC]: (addr, cpu) => {\n    if (cpu.v === 0) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Overflow set\n  [OPCODES.BVS]: (addr, cpu) => {\n    if (cpu.v === 1) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Equal\n  [OPCODES.BEQ]: (addr, cpu) => {\n    if (cpu.z === 1) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Carry Set\n  [OPCODES.BCS]: (addr, cpu) => {\n    if (cpu.c === 1) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Not Equal\n  [OPCODES.BNE]: (addr, cpu) => {\n    if (cpu.z === 0) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Carry Clear\n  [OPCODES.BCC]: (addr, cpu) => {\n    if (cpu.c === 0) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Positive\n  [OPCODES.BPL]: (addr, cpu) => {\n    if (cpu.n === 0) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Minus\n  [OPCODES.BMI]: (addr, cpu) => {\n    if (cpu.n === 1) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Set Decimal Flag\n  [OPCODES.SED]: (addr, cpu) => {\n    cpu.d = 1;\n  },\n\n  // Set Carry Flag\n  [OPCODES.SEC]: (addr, cpu) => {\n    cpu.c = 1;\n  },\n\n  // Return from Interrupt\n  [OPCODES.RTI]: (addr, cpu) => {\n    cpu.setFlags(cpu.stackPull8() | 0x20);\n    cpu.pc = cpu.stackPull16();\n  },\n\n  // Logical AND\n  [OPCODES.AND]: (addr, cpu) => {\n    var value = cpu.read8(addr);\n    cpu.a = cpu.a & value;\n\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Transfer Accumulator to Y\n  [OPCODES.TAY]: (addr, cpu) => {\n    cpu.y = cpu.a;\n    cpu.setNegativeFlag(cpu.y);\n    cpu.setZeroFlag(cpu.y);\n  },\n\n  // Load Accumulator\n  [OPCODES.LDA]: (addr, cpu) => {\n    cpu.a = cpu.read8(addr);\n\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Load Y Register\n  [OPCODES.LDY]: (addr, cpu) => {\n    cpu.y = cpu.read8(addr);\n    cpu.setNegativeFlag(cpu.y);\n    cpu.setZeroFlag(cpu.y);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Load X Register\n  [OPCODES.LDX]: (addr, cpu) => {\n    cpu.x = cpu.read8(addr);\n    cpu.setNegativeFlag(cpu.x);\n    cpu.setZeroFlag(cpu.x);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Store X Register\n  [OPCODES.STX]: (addr, cpu) => {\n    cpu.write8(addr, cpu.x);\n  },\n\n  // Store Y Register\n  [OPCODES.STY]: (addr, cpu) => {\n    cpu.write8(addr, cpu.y);\n  },\n\n  // Store Accumulator\n  [OPCODES.STA]: (addr, cpu) => {\n    cpu.write8(addr, cpu.a);\n  },\n\n  // Compare\n  [OPCODES.CMP]: (addr, cpu) => {\n    var value = cpu.read8(addr);\n    var tmpA = cpu.a - value;\n\n    if (cpu.a >= value) {\n      cpu.c = 1;\n    } else {\n      cpu.c = 0;\n    }\n\n    cpu.setNegativeFlag(tmpA);\n    cpu.setZeroFlag(tmpA);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Compare X Register\n  [OPCODES.CPX]: (addr, cpu) => {\n    var value = cpu.read8(addr);\n    var tmpX = cpu.x - value;\n\n    if (cpu.x >= value) {\n      cpu.c = 1;\n    } else {\n      cpu.c = 0;\n    }\n\n    cpu.setNegativeFlag(tmpX);\n    cpu.setZeroFlag(tmpX);\n  },\n\n  // Compare Y Register\n  [OPCODES.CPY]: (addr, cpu) => {\n    var value = cpu.read8(addr);\n    var tmpY = cpu.y - value;\n\n    if (cpu.y >= value) {\n      cpu.c = 1;\n    } else {\n      cpu.c = 0;\n    }\n\n    cpu.setNegativeFlag(tmpY);\n    cpu.setZeroFlag(tmpY);\n  },\n\n  // Arithmetic Shift Left (Accumulator Mode)\n  [OPCODES.ASL_ACC]: (addr, cpu) => {\n    cpu.c = (cpu.a >> 7) & 1;\n    cpu.a = (cpu.a << 1) & 0xff;\n\n    cpu.setZeroFlag(cpu.a);\n    cpu.setNegativeFlag(cpu.a);\n  },\n\n  // Arithmetic Shift Left\n  [OPCODES.ASL]: (addr, cpu) => {\n    var value = cpu.read8(addr);\n\n    cpu.c = (value >> 7) & 1;\n    value = (value << 1) & 0xff;\n\n    cpu.setZeroFlag(value);\n    cpu.setNegativeFlag(value);\n    cpu.write8(addr, value);\n  },\n\n  // Subtract with Carry\n  [OPCODES.SBC]: (addr, cpu) => {\n    var a = cpu.a;\n    var b = cpu.read8(addr);\n    var c = cpu.c;\n\n    cpu.a = (cpu.a - b - (1 - cpu.c)) & 0xff;\n\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n\n    if (a - b - (1 - c) >= 0) {\n      cpu.c = 1;\n    } else {\n      cpu.c = 0;\n    }\n\n    if (((a ^ b) & 0x80) !== 0 && ((a ^ cpu.a) & 0x80) !== 0) {\n      cpu.v = 1;\n    } else {\n      cpu.v = 0;\n    }\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Exclusive OR\n  [OPCODES.EOR]: (addr, cpu) => {\n    var value = cpu.read8(addr);\n    cpu.a = (cpu.a ^ value) & 0xff;\n\n    cpu.setZeroFlag(cpu.a);\n    cpu.setNegativeFlag(cpu.a);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Return From Subroutine\n  [OPCODES.RTS]: (addr, cpu) => {\n    cpu.pc = cpu.stackPull16() + 1;\n  },\n\n  // Increment Y Register\n  [OPCODES.INY]: (addr, cpu) => {\n    cpu.y = (cpu.y + 1) & 0xff;\n    cpu.setNegativeFlag(cpu.y);\n    cpu.setZeroFlag(cpu.y);\n  },\n\n  // Increment X Register\n  [OPCODES.INX]: (addr, cpu) => {\n    cpu.x = (cpu.x + 1) & 0xff;\n    cpu.setNegativeFlag(cpu.x);\n    cpu.setZeroFlag(cpu.x);\n  },\n\n  // Increment Memory\n  [OPCODES.INC]: (addr, cpu) => {\n    var value = (cpu.read8(addr) + 1) & 0xff;\n\n    cpu.setNegativeFlag(value);\n    cpu.setZeroFlag(value);\n\n    cpu.write8(addr, value);\n  },\n\n  // Push Accumulator\n  [OPCODES.PHA]: (addr, cpu) => {\n    cpu.stackPush8(cpu.a);\n  },\n\n  // Pull Processor Status\n  [OPCODES.PLP]: (addr, cpu) => {\n    cpu.setFlags((cpu.stackPull8() & 0xef) | 0x20);\n  },\n\n  // Logical Inclusive OR\n  [OPCODES.ORA]: (addr, cpu) => {\n    cpu.a = cpu.a | cpu.read8(addr);\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Logical Shift Right (Accumulator Mode)\n  [OPCODES.LSR_ACC]: (addr, cpu) => {\n    cpu.c = cpu.a & 1;\n    cpu.a = cpu.a >> 1;\n\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n  },\n\n  // Logical Shift Right\n  [OPCODES.LSR]: (addr, cpu) => {\n    var value = cpu.read8(addr);\n\n    cpu.c = value & 1;\n    value = value >> 1;\n\n    cpu.write8(addr, value);\n    cpu.setNegativeFlag(value);\n    cpu.setZeroFlag(value);\n  },\n\n  // Transfer Y to Accumulator\n  [OPCODES.TYA]: (addr, cpu) => {\n    cpu.a = cpu.y;\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n  },\n\n  // Rotate Left (Accumulator)\n  [OPCODES.ROL_ACC]: (addr, cpu) => {\n    var tmpC = cpu.c;\n\n    cpu.c = (cpu.a >> 7) & 1;\n    cpu.a = ((cpu.a << 1) & 0xff) | tmpC;\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n  },\n\n  // Rotate Left\n  [OPCODES.ROL]: (addr, cpu) => {\n    var tmpC = cpu.c;\n    var value = cpu.read8(addr);\n\n    cpu.c = (value >> 7) & 1;\n    value = ((value << 1) & 0xff) | tmpC;\n\n    cpu.write8(addr, value);\n    cpu.setNegativeFlag(value);\n    cpu.setZeroFlag(value);\n  },\n\n  // Rotate Right (Accumulator)\n  [OPCODES.ROR_ACC]: (addr, cpu) => {\n    var tmpC = cpu.c;\n\n    cpu.c = cpu.a & 1;\n    cpu.a = (cpu.a >> 1) + (tmpC << 7);\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n  },\n\n  // Rotate Right\n  [OPCODES.ROR]: (addr, cpu) => {\n    var tmpC = cpu.c;\n    var value = cpu.read8(addr);\n\n    cpu.c = value & 1;\n    value = (value >> 1) + (tmpC << 7);\n\n    cpu.write8(addr, value);\n    cpu.setNegativeFlag(value);\n    cpu.setZeroFlag(value);\n  },\n\n  // Bit Test\n  [OPCODES.BIT]: (addr, cpu) => {\n    var value = cpu.read8(addr);\n    cpu.v = (value >> 6) & 1;\n    cpu.setZeroFlag(value & cpu.a);\n    cpu.setNegativeFlag(value);\n  },\n\n  // Jump\n  // FIXME https://github.com/christopherpow/nes-test-roms/blob/master/stress/NEStress.txt#L141\n  [OPCODES.JMP]: (addr, cpu) => {\n    cpu.pc = addr & 0xffff;\n  },\n\n  // Clear Interrupt Disable\n  [OPCODES.CLI]: (addr, cpu) => {\n    cpu.i = 0;\n  },\n\n  // Nope\n  [OPCODES.NOP]: (addr, cpu) => {},\n\n  // SLO\n  // [ OPCODES.SLO ]: ( addr, cpu ) => {},\n\n  // SLO\n  [OPCODES.ISC]: (addr, cpu) => {}\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/opcodes.js","import PPUMemory from \"./PPUMemory\";\n\nimport {\n  INTERRUPTS,\n  RENDERING_MODES,\n  COLORS,\n  SCANLINES,\n  CYCLES\n} from \"./constants\";\n\n/**\n * Picture Processing Unit.\n * Handles graphics.\n */\nclass PPU {\n  constructor() {\n    this.memory = new PPUMemory();\n    this.cycle = 0;\n    this.cycleType = null;\n    this.scanline = 261;\n    this.scanlineType = null;\n    this.interrupt = null;\n\n    //\n    // PPU registers\n    // https://wiki.nesdev.com/w/index.php/PPU_scrolling#PPU_registers\n    //\n\n    // v & t are pointers used to point where to read & write to PPU memory (background)\n\n    // current vram address (15 bit)\n    this.v = 0;\n    // temporary vram address (15 bit)\n    // can also be thought of as the address of the top left onscreen tile.\n    this.t = 0;\n    // Y, used to help compute vram address\n    this.y = 0;\n    // fine x scroll (3 bit)\n    this.x = 0;\n    // write toggle (1 bit)\n    this.w = 0;\n    // even/odd frame flag (1 bit)\n    this.f = 0;\n\n    this.register = 0;\n\n    // NMI flags (Non Maskable Interrupt) controls VBlank\n    // https://wiki.nesdev.com/w/index.php/NMI\n    this.nmiOccurred = 0;\n    this.nmiOutput = 0;\n\n    //\n    // Containers holding bufferized data to display\n    //\n\n    // Background & Sprites temporary variables\n    this.backgroundTileBuffer = [];\n    this.lowTileByte = 0;\n    this.highTileByte = 0;\n    this.attributeTableByte = 0;\n    this.spriteCount = 0;\n    this.sprites = new Array(8);\n\n    for (var i = 0; i < 8; i++) {\n      this.sprites[i] = {\n        buffer: [],\n        x: null,\n        priority: null,\n        index: null\n      };\n    }\n\n    //\n    // Registers\n    //\n\n    this.registerRead = 0;\n    this.registerBuffer = 0;\n\n    // 0x2000 PPUCTRL\n    // Current nametable 0: $2000; 1: $2400; 2: $2800; 3: $2C00\n    this.fNameTable = 0;\n    // Increment vram of 1 or 32\n    this.fIncrement = 0;\n    // 0x0000 or 0x1000 (ignored in 8x16 mode)\n    this.fSpriteTable = 0;\n    // 0x0000 or 0x1000\n    this.fBackgroundTable = 0;\n    // 8x8 or 8x16\n    this.fSpriteSize = 0;\n    // Unused yet ?\n    this.fMasterSlave = 0;\n\n    // 0x2001 PPUMASK\n    this.fGrayscale = 0; // 0: color; 1: grayscale\n    this.fShowLeftBackground = 0; // 0: hide; 1: show\n    this.fShowLeftSprites = 0; // 0: hide; 1: show\n    this.fShowBackground = 0; // 0: hide; 1: show\n    this.fShowSprites = 0; // 0: hide; 1: show\n    // Unused\n    this.fRedTint = 0; // 0: normal; 1: emphasized\n    this.fGreenTint = 0; // 0: normal; 1: emphasized\n    this.fBlueTint = 0; // 0: normal; 1: emphasized\n\n    // 0x2002 PPUSTATUS\n\n    // Set if sprite 0 overlaps background pixel\n    this.fSpriteZeroHit = 0;\n    this.fSpriteOverflow = 0;\n\n    // 0x2003 OAMADDR\n    this.tmpOamAddress = 0;\n    this.oamAddress = 0;\n\n    // 0x2007 PPUDATA\n    this.bufferedData = 0; // for buffered reads\n\n    // Pixel rendering variables\n    this.backgroundColor = 0;\n    this.spriteColor = 0;\n    this.spriteIndex = 0;\n    this.isBackgroundPixel = true;\n    this.backgroundPixel = 0;\n    this.spritePixel = 0;\n    this.color = 0;\n\n    // Buffered data\n    this.setRenderingMode(RENDERING_MODES.NORMAL);\n    this.resetBuffers();\n\n    this.frameReady = false;\n\n    //\n    // Debug data & variables\n    //\n    this.patternTable1 = new Uint8Array(160 * 160 * 4).fill(0xff);\n    this.patternTable2 = new Uint8Array(160 * 160 * 4).fill(0xff); // 124 x 124 + 2px spacing\n    this.oamTable = new Uint8Array(80 * 160 * 4); // 64 x 124 + 2 px spacing\n\n    this.patternTablesColors = [\n      [0xff, 0xff, 0xff],\n      [0x33, 0x33, 0x33],\n      [0xbf, 0xbf, 0xbf],\n      [0x00, 0x00, 0x00]\n    ];\n  }\n\n  /**\n   * Utils methods\n   */\n\n  connectROM(rom) {\n    this.memory.mapper = rom.mapper;\n  }\n\n  resetBuffers() {\n    this.frameBuffer = new Uint8Array(256 * 240 * 4).fill(0x00);\n    this.frameBackgroundBuffer = new Uint8Array(256 * 240 * 4).fill(0x00);\n    this.frameSpriteBuffer = new Uint8Array(256 * 240 * 4).fill(0x00);\n    this.frameColorBuffer = new Uint32Array(256 * 240).fill(0x00);\n  }\n\n  /**\n   *  Used for debugging\n   */\n\n  _parsePatternTable(_from, to, patternTable) {\n    var value = null;\n    var lowTileData = 0;\n    var highTileData = 0;\n    var v = 0;\n    var i = _from;\n    var y = 0;\n    var z = 0;\n    var s = 0;\n\n    while (i < to) {\n      lowTileData = this.memory.read8(i);\n      highTileData = this.memory.read8(i + 8);\n\n      z = 0;\n\n      while (z < 8) {\n        value = (((lowTileData >> z) & 1) << 1) + ((highTileData >> z) & 1);\n        v = (i % 8) * 160; // Tmp vertical position\n        v += y * 160; // Permanent vertical position;\n        v += 7 - z; // Tmp horizontal position\n        v += (s % 16) * 10; // Permanent horizontal position\n        v *= 4; // RGBA\n\n        patternTable[v] = this.patternTablesColors[value][0];\n        patternTable[v + 1] = this.patternTablesColors[value][1];\n        patternTable[v + 2] = this.patternTablesColors[value][2];\n        patternTable[v + 3] = 0xff;\n\n        z++;\n      }\n\n      if (i % 256 === 0 && i > _from) {\n        y += 10; // 10 instead of 8 because need 2px spacing for display\n      }\n\n      i++;\n\n      if (i % 8 === 0) {\n        i += 8;\n        s++;\n      }\n    }\n    return patternTable;\n  }\n\n  getPatternTables() {\n    return [\n      this._parsePatternTable(0, 4096, this.patternTable1),\n      this._parsePatternTable(4096, 8192, this.patternTable2)\n    ];\n  }\n\n  getOamTable() {\n    var tile,\n      table,\n      spriteSize,\n      attributes,\n      address,\n      lowTileData,\n      highTileData,\n      tileShiftX,\n      tileShiftY,\n      tableY,\n      value,\n      v,\n      isReversedVertically,\n      isReversedHorizontally;\n\n    tableY = 0;\n\n    // Not all sprites slots are used\n    // We must flush it at each frame otherwhise we'll end up\n    // with stale sprites\n    this.oamTable.fill(0xff);\n\n    for (let sprite = 0; sprite < 64; sprite++) {\n      tile = this.memory.oam[sprite * 4 + 1];\n      spriteSize = this.getSpriteSize();\n\n      if (this.fSpriteSize === 0) {\n        table = this.fSpriteTable;\n      } else {\n        table = tile & 1;\n        tile = tile & 0xfe;\n      }\n\n      attributes = this.memory.oam[sprite * 4 + 2];\n      address = 0x1000 * table + tile * 16;\n      isReversedVertically = (attributes & 0x80) === 0x80;\n      isReversedHorizontally = (attributes & 0x40) === 0x40;\n\n      if (tile === 0) {\n        // Unused sprite\n        continue;\n      }\n\n      for (let tileY = 0; tileY < spriteSize; tileY++) {\n        lowTileData = this.memory.read8(address);\n        highTileData = this.memory.read8(address + 8);\n        tileShiftY = isReversedVertically ? spriteSize - 1 - tileY : tileY;\n\n        for (let tileX = 0; tileX < 8; tileX++) {\n          tileShiftX = isReversedHorizontally ? 7 - tileX : tileX;\n          value =\n            ((lowTileData >> tileShiftX) & 1) |\n            (((highTileData >> tileShiftX) & 1) << 1);\n          v = tileShiftY * 80; // Tmp vertical position\n          v += tableY * 80; // Permanent vertical position;\n          v += 7 - tileX; // Tmp horizontal position\n          v += (sprite % 8) * 8 + (sprite % 8) * 2; // Permanent horizontal position\n          v *= 4; // RGBA\n\n          this.oamTable[v] = this.patternTablesColors[value][0];\n          this.oamTable[v + 1] = this.patternTablesColors[value][1];\n          this.oamTable[v + 2] = this.patternTablesColors[value][2];\n          this.oamTable[v + 3] = 0xff;\n        }\n\n        address++;\n\n        if (this.fSpriteSize !== 0 && tileY === 7) {\n          tile++;\n          address = 0x1000 * table + tile * 16;\n        }\n      }\n\n      if (sprite % 8 === 0 && sprite > 0) {\n        tableY += 18;\n      }\n    }\n\n    return this.oamTable;\n  }\n\n  /**\n   * Init methods, configuration\n   */\n\n  reset() {\n    // Clean dat shit\n    this.memory.flush();\n    this.cycle = 0;\n    this.scanline = 261;\n    this.v = 0;\n    this.t = 0;\n    this.x = 0;\n    this.w = 0;\n    this.f = 0;\n    this.register = 0;\n    this.nmiOccurred = 0;\n    this.nmiOutput = 0;\n    this.lowTileByte = 0;\n    this.highTileByte = 0;\n    this.tileData = [];\n    this.spriteCount = 0;\n    this.fNameTable = 0;\n    this.fIncrement = 0;\n    this.fSpriteTable = 0;\n    this.fBackgroundTable = 0;\n    this.fSpriteSize = 0;\n    this.fMasterSlave = 0;\n    this.fGrayscale = 0;\n    this.fShowLeftBackground = 0;\n    this.fShowLeftSprites = 0;\n    this.fShowBackground = 0;\n    this.fShowSprites = 0;\n    this.fRedTint = 0;\n    this.fGreenTint = 0;\n    this.fBlueTint = 0;\n    this.fSpriteZeroHit = 0;\n    this.fSpriteOverflow = 0;\n    this.oamAddress = 0;\n    this.bufferedData = 0;\n    this.frameBuffer.fill(0x00);\n    this.frameReady = false;\n  }\n\n  setRenderingMode(mode) {\n    this.renderingMode = {\n      [RENDERING_MODES.NORMAL]: this.normalRenderingMode,\n      [RENDERING_MODES.SPLIT]: this.splitRenderingMode\n    }[mode];\n  }\n\n  /**\n   * Emulation related methods\n   */\n\n  getSpriteSize() {\n    return this.fSpriteSize ? 16 : 8;\n  }\n\n  /*  Handles the read communication between CPU and PPU */\n  read8(address) {\n    switch (address) {\n      case 0x2002: {\n        /**\n         * 0x2002: PPUSTATUS\n         * Used to describe the status of a PPU frame\n         * Note: Resets write toggle `w`\n         */\n        this.registerRead = this.register & 0x1f;\n        this.registerRead = this.registerRead | (this.fSpriteOverflow << 5);\n        this.registerRead = this.registerRead | (this.fSpriteZeroHit << 6);\n        if (this.nmiOccurred) {\n          // Avoid reading the NMI right after it is set\n          if (this.cycle !== 2 || this.scanline !== 241) {\n            this.registerRead = this.registerRead | (1 << 7);\n          }\n        }\n        this.nmiOccurred = 0;\n        this.w = 0;\n\n        return this.registerRead;\n      }\n      case 0x2004: {\n        return this.memory.oam[this.oamAddress];\n      }\n      case 0x2007: {\n        this.registerRead = this.memory.read8(this.v);\n        // Emulate buffered reads\n        if (this.v % 0x4000 < 0x3f00) {\n          this.registerBuffer = this.bufferedData;\n          this.bufferedData = this.registerRead;\n          this.registerRead = this.registerBuffer;\n        } else {\n          this.bufferedData = this.memory.read8(this.v - 0x1000);\n        }\n        // Increment v address\n        if (this.fIncrement === 0) {\n          this.v += 1;\n        } else {\n          this.v += 32;\n        }\n        return this.registerRead;\n      }\n    }\n    return 0;\n  }\n\n  /* Handles the write communication between CPU and PPU */\n  write8(address, value, cpuRead8) {\n    // Pointer to the last value written to a register\n    // Used by PPUSTATUS (0x2002)\n    this.register = value;\n\n    switch (address) {\n      case 0x2000: {\n        /**\n         * 0x2000: PPUCTR\n         * Sets 7 flags that control where/how the ROM data is read\n         */\n        this.fNameTable = (value >> 0) & 3;\n        this.fIncrement = (value >> 2) & 1;\n        this.fSpriteTable = (value >> 3) & 1;\n        this.fBackgroundTable = (value >> 4) & 1;\n        this.fSpriteSize = (value >> 5) & 1;\n        this.fMasterSlave = (value >> 6) & 1;\n        this.nmiOutput = ((value >> 7) & 1) === 1;\n        this.t = (this.t & 0xf3ff) | ((value & 0x03) << 10);\n        break;\n      }\n      case 0x2001: {\n        /**\n         * 0x2001: PPUMASK\n         * Sets 8 flags (1 byte) that control how to display pixels on screen\n         */\n        this.fGrayscale = (value >> 0) & 1;\n        this.fShowLeftBackground = (value >> 1) & 1;\n        this.fShowLeftSprites = (value >> 2) & 1;\n        this.fShowBackground = (value >> 3) & 1;\n        this.fShowSprites = (value >> 4) & 1;\n        this.fRedTint = (value >> 5) & 1;\n        this.fGreenTint = (value >> 6) & 1;\n        this.fBlueTint = (value >> 7) & 1;\n        break;\n      }\n      case 0x2003: {\n        // 0x2003: OAMADDR\n        this.oamAddress = value;\n        break;\n      }\n      case 0x2004: {\n        // 0x2004: OAMDATA (write)\n        this.memory.oam[this.oamAddress] = value;\n        this.oamAddress++;\n        break;\n      }\n      case 0x2005: {\n        /**\n         * 0x2005: PPUSCROLL\n         * Update the scroll variables, aka which pixel of the nametable will be\n         * at the top left of the screen\n         */\n        if (this.w === 0) {\n          this.t = (this.t & 0xffe0) | (value >> 3);\n          this.x = value & 0x07;\n          this.w = 1;\n        } else {\n          this.t = (this.t & 0x8fff) | ((value & 0x07) << 12);\n          this.t = (this.t & 0xfc1f) | ((value & 0xf8) << 2);\n          this.w = 0;\n        }\n        break;\n      }\n      case 0x2006: {\n        if (this.w === 0) {\n          this.t = (this.t & 0x80ff) | ((value & 0x3f) << 8);\n          this.w = 1;\n        } else {\n          this.t = (this.t & 0xff00) | value;\n          this.v = this.t;\n          this.w = 0;\n        }\n        break;\n      }\n      case 0x2007: {\n        // 0x2007: PPUDATA\n        this.memory.write8(this.v, value);\n        if (this.fIncrement === 0) {\n          this.v += 1;\n        } else {\n          this.v += 32;\n        }\n        break;\n      }\n      case 0x4014: {\n        // 0x4014 is handled by the CPU to avoid using cpu methods here\n        break;\n      }\n    }\n  }\n\n  //\n  // https://wiki.nesdev.com/w/index.php/PPU_scrolling\n  //\n\n  updateScrollingX() {\n    // https://wiki.nesdev.com/w/index.php/PPU_scrolling#Coarse_X_increment\n    // increment hori(v)\n    // if coarse X === 31\n    if ((this.v & 0x001f) === 31) {\n      // coarse X = 0\n      this.v = this.v & 0xffe0;\n      // switch horizontal nametable\n      this.v = this.v ^ 0x0400;\n    } else {\n      // increment coarse X\n      this.v++;\n    }\n  }\n\n  updateScrollingY() {\n    // This one really is a mess\n    // Values are coming from nesdev, don't touch, don't break\n    if (this.cycleType === CYCLES.INCREMENT_Y) {\n      // https://wiki.nesdev.com/w/index.php/PPU_scrolling#Y_increment\n      // increment vert(v)\n      // if fine Y < 7\n      if ((this.v & 0x7000) !== 0x7000) {\n        // increment fine Y\n        this.v += 0x1000;\n      } else {\n        // fine Y = 0\n        this.v = this.v & 0x8fff;\n        // let y = coarse Y\n        this.y = (this.v & 0x03e0) >> 5;\n        if (this.y === 29) {\n          // coarse Y = 0\n          this.y = 0;\n          // switch vertical nametable\n          this.v = this.v ^ 0x0800;\n        } else if (this.y === 31) {\n          // coarse Y = 0, nametable not switched\n          this.y = 0;\n        } else {\n          // increment coarse Y\n          this.y++;\n        }\n        // put coarse Y back into v\n        this.v = (this.v & 0xfc1f) | (this.y << 5);\n      }\n    }\n\n    if (this.cycleType === CYCLES.COPY_X) {\n      // https://wiki.nesdev.com/w/index.php/PPU_scrolling#At_dot_257_of_each_scanline\n      this.v = (this.v & 0xfbe0) | (this.t & 0x041f);\n    }\n  }\n\n  setVerticalBlank() {\n    this.nmiOccurred = 1;\n  }\n\n  /**\n   * Called at the end of vertical blank\n   * Prepares the PPU for next frame\n   */\n  clearVerticalBlank() {\n    this.nmiOccurred = 0;\n    this.frameReady = true;\n  }\n\n  acknowledgeFrame() {\n    // Must be called by code handling the NES\n    this.frameReady = false;\n\n    if (this.fShowSprites === 1) {\n      this.fSpriteOverflow = 0;\n      this.fSpriteZeroHit = 0;\n    }\n\n    this.frameBackgroundBuffer.fill(0x00);\n    this.frameSpriteBuffer.fill(0x00);\n  }\n\n  /**\n   * Returns the current background pixel\n   * if background mode is enabled.\n   *\n   * This is where fine x is used as it points to\n   * the correct bit of the current tile to use.\n   */\n  getCurrentBackgroundPixel() {\n    if (this.fShowBackground === 0) {\n      return 0;\n    }\n\n    return this.backgroundTileBuffer[this.x] & 0x0f;\n  }\n\n  /**\n   * Return the current sprite pixel\n   * if sprite mode is enabled and there is a pixel to display.\n   */\n  getCurrentSpritePixel() {\n    var color, offset;\n\n    if (this.fShowSprites === 0) {\n      return [0, 0];\n    }\n\n    for (var i = 0; i < this.spriteCount; i++) {\n      offset = this.cycle - 1 - this.sprites[i].x;\n      if (offset < 0 || offset > 7) {\n        continue;\n      }\n\n      color = this.sprites[i].buffer[offset] & 0x0f;\n\n      if (color % 4 === 0) {\n        continue;\n      }\n      return [i, color | 0x10];\n    }\n    return [0, 0];\n  }\n\n  /**\n   * Assign a RGBA color to the int8 array\n   */\n  setColorToBuffer(buffer, i, color) {\n    buffer[i] = (color >> 16) & 0xff;\n    buffer[i + 1] = (color >> 8) & 0xff;\n    buffer[i + 2] = color & 0xff;\n    buffer[i + 3] = 0xff;\n  }\n\n  normalRenderingMode(pos, colorPos, c) {\n    this.setColorToBuffer(this.frameBuffer, colorPos, c);\n  }\n\n  splitRenderingMode(pos, colorPos, c) {\n    this.frameColorBuffer[pos] = c;\n\n    if (this.isBackgroundPixel) {\n      this.setColorToBuffer(this.frameBackgroundBuffer, colorPos, c);\n    } else {\n      this.setColorToBuffer(this.frameSpriteBuffer, colorPos, c);\n      this.setColorToBuffer(this.frameBackgroundBuffer, colorPos, 0x00);\n    }\n  }\n\n  /**\n   * Render either a background or sprite pixel or a black pixel\n   * Executed 256 times per visible (240) scanline\n   */\n  renderPixel() {\n    var x = this.cycle - 1;\n    var y = this.scanline;\n    var pos = y * 256 + x;\n\n    this.isBackgroundPixel = true;\n    this.color = 0;\n    this.backgroundColor =\n      x < 8 && this.fShowLeftBackground === 0\n        ? 0\n        : this.getCurrentBackgroundPixel();\n\n    [this.spriteIndex, this.spriteColor] =\n      x < 8 && this.fShowLeftSprites === 0\n        ? [0, 0]\n        : this.getCurrentSpritePixel();\n\n    // cf priority decision table https://wiki.nesdev.com/w/index.php/PPU_rendering\n    // TODO: Looks like there's a display blinking bug on some games, cf Castlevania\n    this.backgroundPixel = this.backgroundColor % 4;\n    this.spritePixel = this.spriteColor % 4;\n\n    if (this.backgroundPixel === 0 && this.spritePixel === 0) {\n      this.color = 0;\n    } else if (this.backgroundPixel === 0 && this.spritePixel !== 0) {\n      this.color = this.spriteColor;\n      this.isBackgroundPixel = false;\n    } else if (this.backgroundPixel !== 0 && this.spritePixel === 0) {\n      this.color = this.backgroundColor;\n    } else {\n      if (this.sprites[this.spriteIndex].index === 0 && x < 255) {\n        this.fSpriteZeroHit = 1;\n      }\n      if (this.sprites[this.spriteIndex].priority === 0) {\n        this.color = this.spriteColor;\n        this.isBackgroundPixel = false;\n      } else {\n        this.color = this.backgroundColor;\n      }\n    }\n\n    // Fills the buffer at pos `x`, `y` with rgb color `c`\n    this.renderingMode(\n      pos,\n      pos * 4,\n      COLORS[this.memory.paletteTable.read8(this.color)]\n    );\n  }\n\n  /**\n   *  Helper method that appends a tile line to `tileData`\n   *  by reading & concatenating lowTileByte, highTileByte and attributeTableByte.\n   *  Must be called 8 times (or 16 for some sprites) to generate a sprite\n   */\n  readTileRow(\n    tileData,\n    attributeTableByte,\n    lowTileByte,\n    highTileByte,\n    isReversedHorizontally,\n    flush\n  ) {\n    var tileShiftX = 0;\n    var value = 0;\n\n    if (flush) {\n      tileData.length = 0;\n    }\n\n    for (var tileX = 0; tileX < 8; tileX++) {\n      tileShiftX = isReversedHorizontally ? tileX : 7 - tileX;\n      value =\n        attributeTableByte |\n        (((lowTileByte >> tileShiftX) & 1) |\n          (((highTileByte >> tileShiftX) & 1) << 1));\n\n      tileData.push(value);\n    }\n  }\n\n  fetchSpriteRow(tileData, i, row) {\n    // Sub function of fetchAndStoreSprites\n    var tile = this.memory.oam[i * 4 + 1];\n    var attributes = this.memory.oam[i * 4 + 2];\n    var address;\n    var table = 0;\n    var isReversedVertically = (attributes & 0x80) === 0x80;\n    var isReversedHorizontally = (attributes & 0x40) === 0x40;\n    var attributeTableByte = (attributes & 3) << 2;\n    var spriteSize = this.getSpriteSize();\n\n    if (this.fSpriteSize === 0) {\n      table = this.fSpriteTable;\n    } else {\n      table = tile & 1;\n      tile = tile & 0xfe;\n    }\n\n    row = isReversedVertically ? spriteSize - 1 - row : row;\n\n    if (row > 7) {\n      tile++;\n      row = row % 8;\n    }\n\n    address = 0x1000 * table + tile * 16 + row;\n\n    this.lowTileByte = this.memory.read8(address);\n    this.highTileByte = this.memory.read8(address + 8);\n\n    this.readTileRow(\n      tileData,\n      attributeTableByte,\n      this.lowTileByte,\n      this.highTileByte,\n      isReversedHorizontally,\n      true\n    );\n  }\n\n  /**\n   * Retrieves the sprites that are to be rendered on the next scanline\n   * Executed at the end of a scanline\n   */\n  fetchAndStoreSpriteRows() {\n    var y, attributes, row;\n    this.spriteCount = 0;\n    var spriteSize = this.getSpriteSize();\n\n    for (var i = 0; i < 64; i++) {\n      y = this.memory.oam[i * 4 + 0];\n      row = this.scanline - y;\n\n      if (row < 0 || row >= spriteSize) {\n        continue;\n      }\n\n      if (this.spriteCount < 8) {\n        attributes = this.memory.oam[i * 4 + 2];\n\n        this.fetchSpriteRow(this.sprites[this.spriteCount].buffer, i, row);\n        this.sprites[this.spriteCount].x = this.memory.oam[i * 4 + 3];\n        this.sprites[this.spriteCount].priority = (attributes >> 5) & 1;\n        this.sprites[this.spriteCount].index = i;\n      }\n      this.spriteCount++;\n\n      if (this.spriteCount > 8) {\n        this.spriteCount = 8;\n        this.fSpriteOverflow = 1;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Actions that should be done over 8 ticks\n   * but instead done into 1 call because YOLO.\n   *\n   * Retrieves the background tiles that are to be rendered on the next X bytes\n   *\n   * - Read the nametable byte using current `v`\n   * - Fetch corresponding attribute byte using current `v`\n   * - Read CHR/Pattern table low+high bytes\n   */\n  fetchAndStoreBackgroundRow() {\n    var address;\n    var shift;\n    var fineY;\n    var nameTableByte = 0;\n\n    // Fetch Name Table Byte\n    address = 0x2000 | (this.v & 0x0fff);\n    nameTableByte = this.memory.read8(address);\n\n    // Fetch Attribute Table Byte\n    address =\n      0x23c0 |\n      (this.v & 0x0c00) |\n      ((this.v >> 4) & 0x38) |\n      ((this.v >> 2) & 0x07);\n    shift = ((this.v >> 4) & 4) | (this.v & 2);\n    this.attributeTableByte = ((this.memory.read8(address) >> shift) & 3) << 2;\n\n    // Fetch Low Tile Byte\n    fineY = (this.v >> 12) & 7;\n    address = 0x1000 * this.fBackgroundTable + nameTableByte * 16 + fineY;\n    this.lowTileByte = this.memory.read8(address);\n\n    // Fetch High Tile Byte\n    fineY = (this.v >> 12) & 7;\n    address = 0x1000 * this.fBackgroundTable + nameTableByte * 16 + fineY;\n    this.highTileByte = this.memory.read8(address + 8);\n\n    // Store Tile Data\n    this.readTileRow(\n      this.backgroundTileBuffer,\n      this.attributeTableByte,\n      this.lowTileByte,\n      this.highTileByte,\n      false,\n      false\n    );\n  }\n\n  /**\n   * Determines the type of the cycle\n   * Refer to https://wiki.nesdev.com/w/images/d/d1/Ntsc_timing.png\n   */\n  _cycleType() {\n    if (this.cycle === 0) {\n      return CYCLES.ZERO;\n    } else if (this.cycle === 1) {\n      return CYCLES.ONE;\n    } else if (this.cycle > 1 && this.cycle < 257) {\n      return CYCLES.VISIBLE;\n    } else if (this.cycle === 321) {\n      return CYCLES.FLUSH_TILEDATA;\n    } else if (this.cycle > 321 && this.cycle < 337) {\n      return CYCLES.PREFETCH;\n    } else if (this.cycle === 259) {\n      return CYCLES.SPRITES;\n    } else if (this.cycle === 258) {\n      return CYCLES.INCREMENT_Y;\n    } else if (this.cycle === 257) {\n      return CYCLES.COPY_X;\n    } else if (this.cycle > 279 && this.cycle < 305) {\n      return CYCLES.COPY_Y;\n    } else if (this.cycle === 340) {\n      return CYCLES.MAPPER_TICK;\n    } else {\n      return CYCLES.IDLE;\n    }\n  }\n\n  /**\n   * Determines the type of the scanline\n   */\n  _scanlineType() {\n    if (this.scanline < 240) {\n      return SCANLINES.VISIBLE;\n    } else if (this.scanline === 241) {\n      return SCANLINES.VBLANK;\n    } else if (this.scanline === 261) {\n      return SCANLINES.PRELINE;\n    } else {\n      return SCANLINES.IDLE;\n    }\n  }\n\n  doPreline() {\n    if (\n      this.cycleType === CYCLES.ONE ||\n      this.cycleType === CYCLES.VISIBLE ||\n      this.cycleType === CYCLES.PREFETCH\n    ) {\n      this.backgroundTileBuffer.shift();\n\n      if (this.cycle % 8 === 0) {\n        if (this.cycle < 256) {\n          this.fetchAndStoreBackgroundRow();\n        }\n        this.updateScrollingX();\n      }\n    }\n\n    if (this.cycleType === CYCLES.SPRITES) {\n      this.spriteCount = 0;\n    }\n\n    if (this.cycleType === CYCLES.COPY_Y) {\n      // https://wiki.nesdev.com/w/index.php/PPU_scrolling#During_dots_280_to_304_of_the_pre-render_scanline_.28end_of_vblank.29\n      this.v = (this.v & 0x841f) | (this.t & 0x7be0);\n    }\n\n    this.updateScrollingY();\n\n    if (this.cycleType === CYCLES.ONE) {\n      this.clearVerticalBlank();\n    }\n\n    if (this.cycleType === CYCLES.MAPPER_TICK) {\n      if (this.memory.mapper.tick()) {\n        return INTERRUPTS.IRQ;\n      }\n    }\n  }\n\n  doVisibleLine() {\n    if (this.cycleType === CYCLES.ONE || this.cycleType === CYCLES.VISIBLE) {\n      this.renderPixel();\n    }\n\n    if (this.cycleType === CYCLES.VISIBLE) {\n      this.backgroundTileBuffer.shift();\n\n      if (this.cycle % 8 === 0) {\n        if (this.cycle < 256) {\n          this.fetchAndStoreBackgroundRow();\n        }\n        this.updateScrollingX();\n      }\n    } else if (this.cycleType === CYCLES.FLUSH_TILEDATA) {\n      // Hackish hack, empty the remaining tile data at the beginning of prefetch\n      // Needs improvement\n      this.backgroundTileBuffer.length = 0;\n    } else if (this.cycleType === CYCLES.PREFETCH) {\n      if (this.cycle % 8 === 0) {\n        this.fetchAndStoreBackgroundRow();\n        this.updateScrollingX();\n      }\n    }\n\n    this.updateScrollingY();\n\n    if (this.cycleType === CYCLES.SPRITES) {\n      this.fetchAndStoreSpriteRows();\n    }\n\n    if (this.cycleType === CYCLES.MAPPER_TICK) {\n      if (this.memory.mapper.tick()) {\n        return INTERRUPTS.IRQ;\n      }\n    }\n\n    return null;\n  }\n\n  doVBlankLine() {\n    if (this.cycleType === CYCLES.SPRITES) {\n      this.spriteCount = 0;\n    }\n\n    // Vertical Blank is set at second tick of scanline 241\n    if (this.cycleType === CYCLES.ONE) {\n      this.setVerticalBlank();\n      if (this.nmiOutput) {\n        return INTERRUPTS.NMI; // Clean this shit\n      }\n    }\n\n    return null;\n  }\n\n  incrementCounters() {\n    this.cycle++;\n\n    // Skip one cycle when background is on for each odd frame\n    if (\n      this.scanline === 261 &&\n      this.cycle === 340 &&\n      this.fShowBackground !== 0 &&\n      this.f === 1\n    ) {\n      this.cycle++;\n      this.f = this.f ^ 1;\n    }\n\n    if (this.cycle === 341) {\n      this.cycle = 0;\n      this.scanline++;\n      if (this.scanline === 262) {\n        this.scanline = 0;\n      }\n    }\n  }\n\n  /**\n   * Main function of PPU.\n   * Increments counters (cycle, scanline, frame)\n   * Executes one action based on scanline + cycle\n   */\n  tick() {\n    this.cycleType = this._cycleType();\n    this.scanlineType = this._scanlineType();\n\n    if (this.scanlineType === SCANLINES.VBLANK) {\n      this.interrupt = this.doVBlankLine();\n    } else if (this.fShowBackground !== 0 || this.fShowSprites !== 0) {\n      if (this.scanlineType === SCANLINES.PRELINE) {\n        this.interrupt = this.doPreline();\n      } else if (this.scanlineType === SCANLINES.VISIBLE) {\n        this.interrupt = this.doVisibleLine();\n      }\n    } else {\n      this.interrupt = null;\n    }\n\n    this.incrementCounters();\n\n    return this.interrupt;\n  }\n}\n\nexport default PPU;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/PPU.js","/**\n * http://wiki.nesdev.com/w/index.php/PPU_nametables\n */\nclass NameTable {\n  constructor() {\n    this.data = new Uint8Array(2048).fill(0x00);\n    // http://wiki.nesdev.com/w/index.php/Mirroring\n    this.mirrors = [\n      [0, 0, 1, 1], // Horizontal\n      [0, 1, 0, 1], // Vertical\n      [0, 0, 0, 0], // Single screen\n      [1, 1, 1, 1], // Single screen 2\n      [0, 1, 2, 3] // 4 Screen\n    ];\n  }\n\n  flush() {\n    this.data.fill(0x00);\n  }\n\n  _resolve(mode, addr) {\n    addr = addr % 0x1000;\n\n    return this.mirrors[mode][parseInt(addr / 0x400)] * 0x400 + (addr % 0x400);\n  }\n\n  read8(mode, addr) {\n    return this.data[this._resolve(mode, addr)];\n  }\n\n  write8(mode, addr, value) {\n    this.data[this._resolve(mode, addr)] = value;\n  }\n}\n\n/**\n * Color lookup table\n * 8 palettes of 4 colors\n */\nclass PaletteTable {\n  constructor() {\n    this.data = new Uint8Array(32).fill(0x00);\n  }\n\n  flush() {\n    this.data.fill(0x00);\n  }\n\n  write8(addr, value) {\n    addr = addr % 32;\n\n    // Each 4th byte of the palettes are mirrored into each other\n    // $3F10/$3F14/$3F18/$3F1C == $3F00/$3F04/$3F08/$3F0C\n    if (addr % 4 === 0 && addr >= 16) {\n      addr -= 16;\n    }\n\n    this.data[addr] = value;\n  }\n\n  read8(addr) {\n    addr = addr % 32;\n\n    if (addr % 4 === 0 && addr >= 16) {\n      addr -= 16;\n    }\n    return this.data[addr];\n  }\n}\n\n/**\n *\n *   Aka. VRAM\n *\n *   CHR: 0x0000 => 0x2000\n *   Nametable: 0x2000 => 0x3f00\n *   Background palette: 0x3F00 => 0x3F10\n *   Sprite palette: 0x3F00 => 0x3F20\n *\n */\nclass PPUMemory {\n  constructor() {\n    this.paletteTable = new PaletteTable();\n\n    // https://wiki.nesdev.com/w/index.php/PPU_OAM\n    // Max 64 sprites\n    // Byte 0 => Y position\n    // Byte 1 => Bank nbr (address in mapper)\n    // Byte 2 => Attributes (priority, hori. vert. switch)\n    // Byte 3 => X position\n    this.oam = new Uint8Array(256).fill(0x00);\n    this.nameTable = new NameTable();\n    this.mapper = null;\n  }\n\n  flush() {\n    this.paletteTable.flush();\n    this.oam.fill(0x00);\n    this.nameTable.flush();\n  }\n\n  write8(addr, value) {\n    addr = addr % 0x4000;\n\n    if (addr < 0x2000) {\n      this.mapper.write8(addr, value);\n    } else if (addr < 0x3f00) {\n      this.nameTable.write8(this.mapper.mirrorType, addr, value);\n    } else if (addr < 0x4000) {\n      this.paletteTable.write8(addr, value);\n    } else {\n      throw new Error(\"Unknown PPU addr \" + addr);\n    }\n  }\n\n  readNametable(addr) {\n    addr = addr % 0x4000;\n    return this.nameTable.read8(this.mapper.mirrorType, addr);\n  }\n\n  read8(addr) {\n    addr = addr % 0x4000;\n\n    if (addr < 0x2000) {\n      return this.mapper.read8(addr);\n    } else if (addr < 0x3f00) {\n      return this.nameTable.read8(this.mapper.mirrorType, addr);\n    } else if (addr < 0x4000) {\n      this.paletteTable.read8(addr);\n    } else {\n      throw new Error(\"Unknown PPU addr \" + addr);\n    }\n  }\n}\n\nexport default PPUMemory;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/PPUMemory.js","import NROM from \"./mappers/NROM\";\nimport MMC1 from \"./mappers/MMC1\";\nimport MMC3 from \"./mappers/MMC3\";\nimport UXROM from \"./mappers/UXROM\";\n\nconst HEADER_SIZE = 16;\nconst PRG_BANK_SIZE = 16384;\nconst CHR_BANK_SIZE = 8192;\n\nclass ROM {\n  /**\n   * Parse a .nes file according to the INES file format\n   * http://wiki.nesdev.com/w/index.php/INES\n   * https://wiki.nesdev.com/w/index.php/CHR_ROM_vs._CHR_RAM\n\n   * CHR => Pattern tables, the raw data to render by the PPU\n   * PRG => The program, used by the CPU\n   */\n  constructor(dataBuffer) {\n    var p = 0;\n    var byteArray = new Uint8Array(dataBuffer);\n    this.header = byteArray.subarray(p, HEADER_SIZE);\n\n    p += HEADER_SIZE;\n\n    this.nbrPRGBanks = this.header[4];\n    this.nbrCHRBanks = this.header[5];\n    // Cf below for types\n    this.mapperType = (this.header[6] >> 4) | ((this.header[7] >> 4) << 4);\n    // Type will depend on the mapper, check mapper classes\n    this.mirrorType = (this.header[6] & 1) | (((this.header[6] >> 3) & 1) << 1);\n    // 0: NTSC, 1: PAL\n    this.region = this.header[9] & 1;\n\n    var prgLength = this.nbrPRGBanks * PRG_BANK_SIZE;\n    var chrLength = this.nbrCHRBanks * CHR_BANK_SIZE;\n\n    this.prg = byteArray.subarray(p, p + prgLength);\n\n    p += prgLength;\n\n    if (chrLength > 0) {\n      this.chr = byteArray.subarray(p, p + chrLength);\n    } else {\n      this.chr = new Uint8Array(CHR_BANK_SIZE).fill(0);\n    }\n\n    switch (this.mapperType) {\n      case 0: {\n        this.mapper = new NROM(this);\n        break;\n      }\n      case 1: {\n        this.mapper = new MMC1(this);\n        break;\n      }\n      case 2: {\n        this.mapper = new UXROM(this);\n        break;\n      }\n      case 4: {\n        this.mapper = new MMC3(this);\n        break;\n      }\n      default: {\n        throw new Error(\"Invalid mapper: \" + this.mapperType);\n      }\n    }\n  }\n\n  /*\n  toJSON() {\n    return {\n      nbrPRGBanks: this.nbrPRGBanks,\n      nbrCHRBanks: this.nbrCHRBanks,\n      mapperType: this.mapperType,\n      mirrorType: this.mirrorType,\n      region: this.region,\n      mapper: this.mapper.toJSON()\n    };\n  } */\n}\n\nexport default ROM;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/ROM.js","import Mapper from \"./Mapper\";\n\n/**\n *   http://wiki.nesdev.com/w/index.php/NROM\n */\n\nclass NROM extends Mapper {\n  constructor(rom) {\n    super(rom);\n\n    this.prg.switchBank(0x4000, 0x8000, this.prg.bankNbr / 16 - 1);\n  }\n\n  read8(addr) {\n    if (addr < 0x2000) {\n      return this.chr.read8(addr);\n    } else if (addr < 0x8000) {\n      return this.sram[addr - 0x6000];\n    } else {\n      return this.prg.read8(addr - 0x8000);\n    }\n  }\n\n  write8(addr, value) {\n    if (addr < 0x2000) {\n      this.chr.write8(addr, value);\n    } else if (addr < 0x8000) {\n      this.sram[addr - 0x6000] = value;\n    } else {\n      console.warn(\"Invalid write addr\", addr);\n    }\n  }\n}\n\nexport default NROM;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/mappers/NROM.js","import BankMemory from \"./Bank\";\n\n/**\n * http://wiki.nesdev.com/w/index.php/Mapper\n */\nclass Mapper {\n  constructor(rom) {\n    this.chr = new BankMemory(rom.chr, 0x2000, true);\n    this.prg = new BankMemory(rom.prg, 0x8000, false);\n    this.sram = new Array(0x2000).fill(0xff);\n    this.mirrorType = rom.mirrorType;\n  }\n\n  /**\n   *  Only used for a few mappers\n   */\n  tick() {}\n}\n\nexport default Mapper;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/mappers/Mapper.js","class BankMemory {\n  constructor(data, windowSize, fixed) {\n    this.data = data;\n    this.fixed = fixed;\n    this.swapMode = 0;\n    this.windowSize = windowSize;\n    this.bankNbr = parseInt(this.data.length / 0x0400);\n    this.pointers = new Array(parseInt(windowSize / 0x0400)).fill(0);\n    // Tmp variables\n    this.p = 0;\n    this.o = 0;\n    this.p1 = 0;\n    this.p2 = 0;\n\n    for (let i = 0; i < this.pointers.length; i++) {\n      this.pointers[i] = i;\n    }\n  }\n\n  switchBank(_from, _to, value) {\n    this.p1 = parseInt(_from / 0x0400);\n    this.p2 = parseInt(_to / 0x0400);\n    // Explain\n    value = value * (this.p2 - this.p1);\n\n    for (let i = this.p1; i < this.p2; i++) {\n      this.pointers[i] = value + (i - this.p1);\n    }\n  }\n\n  write8(addr, value) {\n    this.p = parseInt(addr / 0x0400);\n    this.o = addr % 0x0400;\n    this.data[this.pointers[this.p] * 0x0400 + this.o] = value;\n  }\n\n  read8(addr) {\n    this.p = parseInt(addr / 0x0400);\n    this.o = addr % 0x0400;\n    return this.data[this.pointers[this.p] * 0x0400 + this.o];\n  }\n}\n\nexport default BankMemory;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/mappers/Bank.js","import Mapper from \"./Mapper\";\n\nimport { NAMETABLE_MIRRORS } from \"./constants\";\n\nconst MMC1_MIRRORS = {\n  0: NAMETABLE_MIRRORS.SINGLE_SCREEN_0,\n  1: NAMETABLE_MIRRORS.SINGLE_SCREEN_1,\n  2: NAMETABLE_MIRRORS.VERTICAL,\n  3: NAMETABLE_MIRRORS.HORIZONTAL\n};\n\n/**\n * http://wiki.nesdev.com/w/index.php/MMC1\n */\nclass MMC1 extends Mapper {\n  constructor(rom) {\n    super(rom);\n    this.buffer = 0x10;\n    this.bufferIndex = 0;\n    this.conf = 0x0c;\n    this.prgBankMode = 0;\n    this.chrBankMode = 0;\n\n    this.prg.switchBank(0x4000, 0x8000, this.prg.bankNbr / 16 - 1);\n  }\n\n  read8(addr) {\n    if (addr < 0x2000) {\n      return this.chr.read8(addr);\n    } else if (addr < 0x8000) {\n      return this.sram[addr - 0x6000];\n    } else {\n      return this.prg.read8(addr - 0x8000);\n    }\n  }\n\n  /**\n   *  MMC1 has an internal buffer which needs to be written 5 times before switching banks or\n   *  updating registers\n   */\n  write8(addr, value) {\n    if (addr < 0x2000) {\n      this.chr.write8(addr, value);\n    } else if (addr < 0x8000) {\n      this.sram[addr - 0x6000] = value;\n    } else {\n      if ((value & 0x80) !== 0) {\n        this.buffer = 0x10;\n        this.bufferIndex = 0;\n        this.control(this.conf | 0x0c);\n      } else {\n        // Write Register\n        this.buffer = (this.buffer >> 1) | ((value & 1) << 4);\n        this.bufferIndex++;\n\n        if (this.bufferIndex === 5) {\n          value = this.buffer;\n\n          // Control\n          if (addr < 0xa000) {\n            this.control(value);\n          } else if (addr < 0xc000) {\n            // CHR Bank 0\n            if (!this.chr.fixed) {\n              this.chr.switchBank(0, 0x1000, value);\n            } else {\n              value = parseInt(value >> 1);\n              this.chr.switchBank(0, 0x2000, value);\n            }\n          } else if (addr < 0xe000) {\n            // CHR Bank 1\n            if (!this.chr.fixed) {\n              // this.chr.updateUpperBank(value);\n              this.chr.switchBank(0x1000, 0x2000, value);\n            }\n          } else {\n            // PRG Bank\n            if (this.prg.fixed) {\n              value = parseInt(value >> 1);\n              this.prg.switchBank(0, 0x8000, value);\n            } else {\n              if (this.prg.swapMode === 0) {\n                this.prg.switchBank(0, 0x4000, 0);\n                this.prg.switchBank(0x4000, 0x8000, value);\n              } else {\n                this.prg.switchBank(0, 0x4000, value);\n                this.prg.switchBank(0x4000, 0x8000, this.prg.bankNbr / 16 - 1);\n              }\n            }\n          }\n\n          this.buffer = 0x10;\n          this.bufferIndex = 0;\n        }\n      }\n    }\n  }\n\n  control(value) {\n    this.conf = value;\n    this.prgBankMode = (value >> 2) & 3;\n    this.chrBankMode = (value >> 4) & 1;\n    this.mirrorType = MMC1_MIRRORS[value & 3];\n\n    if (this.prgBankMode === 2) {\n      this.prg.swapMode = 0;\n    }\n    if (this.prgBankMode === 3) {\n      this.prg.swapMode = 1;\n    }\n\n    this.prg.fixed = this.prgBankMode === 0 || this.prgBankMode === 1;\n    this.chr.fixed = this.chrBankMode === 0;\n  }\n}\n\nexport default MMC1;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/mappers/MMC1.js","export var BANK_SIZES = {\n  \"4k\": 0x1000,\n  \"8k\": 0x2000,\n  \"16k\": 0x4000,\n  \"32k\": 0x8000\n};\n\nexport var NAMETABLE_MIRRORS = {\n  HORIZONTAL: 0,\n  VERTICAL: 1,\n  SINGLE_SCREEN_0: 2,\n  SINGLE_SCREEN_1: 3,\n  FOUR_SCREEN: 4\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/mappers/constants.js","import Mapper from \"./Mapper\";\nimport { NAMETABLE_MIRRORS } from \"./constants\";\n\nconst MMC3_MIRRORS = {\n  0: NAMETABLE_MIRRORS.VERTICAL,\n  1: NAMETABLE_MIRRORS.HORIZONTAL\n};\n\nclass MMC3 extends Mapper {\n  constructor(rom) {\n    super(rom);\n    this.prgBankMode = 0;\n    this.chrBankMode = 0;\n    this.bankRegister = 0;\n    this.irqCounter = 0;\n    this.irqLatch = 0;\n    this.irqEnable = true;\n\n    // PRG banks of MMC3 requires special bank switching at init\n    this.prg.switchBank(0x4000, 0x6000, this.prg.bankNbr / 8 - 2);\n    this.prg.switchBank(0x6000, 0x8000, this.prg.bankNbr / 8 - 1);\n    this.prg.switchBank(0x0000, 0x2000, 0);\n    this.prg.switchBank(0x2000, 0x4000, 1);\n  }\n\n  /**\n   *  MMC3 has its own tick method. We must trigger IRQ interrupts\n   *  each time our internal counter reaches 0. Then it is reset\n   *  using `irqLatch` which is set in `control()`\n   */\n  tick() {\n    if (this.irqCounter === 0) {\n      this.irqCounter = this.irqLatch;\n    } else {\n      this.irqCounter--;\n      if (this.irqCounter === 0 && this.irqEnable) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  read8(addr) {\n    if (addr < 0x2000) {\n      return this.chr.read8(addr);\n    } else if (addr < 0x8000) {\n      return this.sram[addr - 0x6000];\n    } else {\n      return this.prg.read8(addr - 0x8000);\n    }\n  }\n\n  write8(addr, value) {\n    if (addr < 0x2000) {\n      this.chr.write8(addr, value);\n    } else if (addr < 0x8000) {\n      this.sram[addr - 0x6000] = value;\n    } else {\n      this.control(addr, value);\n    }\n  }\n\n  /**\n   *  To switch banks, MMC3 require first to set `bankRegister`\n   *  then to make another call to update the appropriate CHR or PRG\n   *  banks using one of two different modes.\n   */\n  control(addr, value) {\n    var isEven = addr % 2 === 0;\n\n    if (addr < 0x9fff && isEven) {\n      this.prgBankMode = (value >> 6) & 1;\n      this.chrBankMode = (value >> 7) & 1;\n      this.bankRegister = value & 7;\n    } else if (addr < 0xa000 && !isEven) {\n      switch (this.bankRegister) {\n        // Select 2 KB CHR bank at PPU $0000-$07FF (or $1000-$17FF);\n        case 0: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0, 0x0400, value & 0xfe);\n            this.chr.switchBank(0x0400, 0x0800, value | 0x01);\n          } else {\n            this.chr.switchBank(0x1000, 0x1400, value & 0xfe);\n            this.chr.switchBank(0x1400, 0x1800, value | 0x01);\n          }\n          break;\n        }\n        // Select 2 KB CHR bank at PPU $0800-$0FFF (or $1800-$1FFF);\n        case 1: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0x0800, 0x0c00, value & 0xfe);\n            this.chr.switchBank(0x0c00, 0x1000, value | 1);\n          } else {\n            this.chr.switchBank(0x1800, 0x1c00, value & 0xfe);\n            this.chr.switchBank(0x1c00, 0x2000, value | 1);\n          }\n          break;\n        }\n        // Select 1 KB CHR bank at PPU $1000-$13FF (or $0000-$03FF);\n        case 2: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0x1000, 0x01400, value);\n          } else {\n            this.chr.switchBank(0x0000, 0x0400, value);\n          }\n          break;\n        }\n        // Select 1 KB CHR bank at PPU $1400-$17FF (or $0400-$07FF);\n        case 3: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0x1400, 0x1800, value);\n          } else {\n            this.chr.switchBank(0x0400, 0x0800, value);\n          }\n          break;\n        }\n        // Select 1 KB CHR bank at PPU $1800-$1BFF (or $0800-$0BFF);\n        case 4: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0x1800, 0x1c00, value);\n          } else {\n            this.chr.switchBank(0x0800, 0x0c00, value);\n          }\n          break;\n        }\n        // Select 1 KB CHR bank at PPU $1C00-$1FFF (or $0C00-$0FFF);\n        case 5: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0x1c00, 0x2000, value);\n          } else {\n            this.chr.switchBank(0x0c00, 0x1000, value);\n          }\n          break;\n        }\n        // Select 8 KB PRG ROM bank at $8000-$9FFF (or $C000-$DFFF);\n        case 6: {\n          if (this.prgBankMode === 0) {\n            this.prg.switchBank(0x4000, 0x6000, this.prg.bankNbr / 8 - 2);\n            this.prg.switchBank(0x0000, 0x2000, value);\n          } else {\n            this.prg.switchBank(0x0000, 0x2000, this.prg.bankNbr / 8 - 2);\n            this.prg.switchBank(0x4000, 0x6000, value);\n          }\n\n          break;\n        }\n        // Select 8 KB PRG ROM bank at $A000-$BFFF\n        case 7: {\n          this.prg.switchBank(0x2000, 0x4000, value);\n\n          if (this.prgBankMode === 0) {\n            this.prg.switchBank(0x4000, 0x6000, this.prg.bankNbr / 8 - 2);\n          } else {\n            this.prg.switchBank(0x0000, 0x2000, this.prg.bankNbr / 8 - 2);\n          }\n          break;\n        }\n      }\n    } else if (addr < 0xbfff && isEven) {\n      this.mirrorType = MMC3_MIRRORS[value & 1];\n    } else if (addr < 0xc000 && !isEven) {\n      // Write Protect, not implemented\n    } else if (addr < 0xdfff && isEven) {\n      this.irqLatch = value;\n    } else if (addr < 0xe000 && !isEven) {\n      this.irqCounter = 0;\n    } else if (addr < 0xffff && isEven) {\n      this.irqEnable = false;\n    } else if (addr < 0x10000 && !isEven) {\n      this.irqEnable = true;\n    } else {\n      throw new Error(\"Unknown control: \" + addr);\n    }\n  }\n}\n\nexport default MMC3;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/mappers/MMC3.js","import Mapper from \"./Mapper\";\n\n/**\n *  http://wiki.nesdev.com/w/index.php/UxROM\n */\nclass UXROM extends Mapper {\n  constructor(rom) {\n    super(rom);\n\n    this.prg.switchBank(0x4000, 0x8000, this.prg.bankNbr / 16 - 1);\n  }\n\n  read8(addr) {\n    if (addr < 0x2000) {\n      return this.chr.read8(addr);\n    } else if (addr < 0x8000) {\n      return this.sram[addr - 0x6000];\n    } else {\n      return this.prg.read8(addr - 0x8000);\n    }\n  }\n\n  write8(addr, value) {\n    if (addr < 0x2000) {\n      this.chr.write8(addr, value);\n    } else if (addr < 0x8000) {\n      this.sram[addr - 0x6000] = value;\n    } else {\n      this.prg.switchBank(0, 0x4000, value & 0xf);\n    }\n  }\n}\n\nexport default UXROM;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/mappers/UXROM.js","// https://nesdoug.com/2015/12/02/14-intro-to-sound/\n// https://wiki.nesdev.com/w/index.php/APU_Frame_Counter\n\n/**\n * Is there anybody out there\n */\nclass APU {\n  write8(address, value) {}\n\n  read8() {\n    return 255;\n  }\n\n  tick() {}\n}\n\nexport default APU;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/APU.js","import { KEYBOARD_KEYS, BUTTONS } from \"./constants.js\";\n\n/**\n * The 8 controller buttons are mapped on 8bits\n */\nclass Controller {\n  constructor() {\n    this.buttons = new Array(8).fill(0);\n    // Switch\n    this.strobe = 0;\n    this.i = 0;\n\n    // Welp ... Don't have a better idea\n    document.addEventListener(\"keydown\", this.keyDown.bind(this));\n    document.addEventListener(\"keyup\", this.keyUp.bind(this));\n  }\n\n  _checkInput(event, value) {\n    switch (event.keyCode) {\n      case KEYBOARD_KEYS.START: {\n        this.buttons[BUTTONS.START] = value;\n        break;\n      }\n      case KEYBOARD_KEYS.SELECT: {\n        this.buttons[BUTTONS.SELECT] = value;\n        break;\n      }\n      case KEYBOARD_KEYS.A: {\n        this.buttons[BUTTONS.A] = value;\n        break;\n      }\n      case KEYBOARD_KEYS.B: {\n        this.buttons[BUTTONS.B] = value;\n        break;\n      }\n      case KEYBOARD_KEYS.LEFT: {\n        this.buttons[BUTTONS.LEFT] = value;\n        event.preventDefault();\n        break;\n      }\n      case KEYBOARD_KEYS.UP: {\n        this.buttons[BUTTONS.UP] = value;\n        event.preventDefault();\n        break;\n      }\n      case KEYBOARD_KEYS.RIGHT: {\n        this.buttons[BUTTONS.RIGHT] = value;\n        event.preventDefault();\n        break;\n      }\n      case KEYBOARD_KEYS.DOWN: {\n        this.buttons[BUTTONS.DOWN] = value;\n        event.preventDefault();\n        break;\n      }\n    }\n  }\n\n  keyDown(event) {\n    this._checkInput(event, 1);\n  }\n\n  keyUp(event) {\n    this._checkInput(event, 0);\n  }\n\n  write8(value) {\n    this.strobe = value;\n    if ((this.strobe & 1) === 1) {\n      this.i = 0;\n    }\n  }\n\n  read8() {\n    var value = this.buttons[this.i];\n    this.i++;\n\n    return value;\n  }\n}\n\nexport default Controller;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Controller.js","// From stackoverflow https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\n\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nexport function isObject(item) {\n  return item && typeof item === \"object\" && !Array.isArray(item);\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Merge.js","class Notifier {\n  constructor() {\n    this.observers = [];\n  }\n\n  addObserver(obs) {\n    this.observers.push(obs);\n  }\n\n  removeObserver(obs) {\n    this.observers = this.observers.filter(i => i !== obs);\n  }\n\n  notifyObservers(t, e) {\n    this.observers.forEach(obs => obs.notify(t, e));\n  }\n}\n\nexport default Notifier;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Notifier.js","/**\n * Helper to encapsulate throttling logic\n */\nclass Throttle {\n  constructor(fps) {\n    this.fpsInterval = 1000 / fps;\n    this.now = null;\n    this.elapsed = null;\n    this.then = null;\n  }\n\n  isThrottled() {\n    this.now = Date.now();\n    this.elapsed = this.now - this.then;\n\n    if (this.elapsed > this.fpsInterval) {\n      this.then = this.now - (this.elapsed % this.fpsInterval);\n      return false;\n    }\n    return true;\n  }\n}\n\nexport default Throttle;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Throttle.js"],"sourceRoot":""}